{"test_questions": [[{"question": "What will happen if in a C program you assign a value to an array element whose subscript exceeds the size of array?", "opta": "The element will be set to 0.", "optb": "The compiler would report an error.", "optc": "The program may crash if some important data gets overwritten.", "optd": "The array size would appropriately grow.", "ans": "C", "explanation": "If the index of the array size is exceeded, the program will crash. Hence \"option c\" is the correct answer. But the modern compilers will take care of this kind of errors.\nExample: Run the below program, it will crash in Windows (TurboC Compiler)\n#include<stdio.h>\n\nint main()\n{\n    int arr[2];\n    arr[3]=10;\n    printf(\"%d\",arr[3]);\n    return 0;\n}\n\nSince C is a compiler dependent language, it may give different outputs at different platforms. We have given the Turbo-C Compiler (Windows) output.\nPlease try the above programs in Windows (Turbo-C Compiler) and Linux (GCC Compiler), you will understand the difference better."}, {"question": "What does the following declaration mean?\nint (*ptr)[10];", "opta": "ptr is array of pointers to 10 integers", "optb": "ptr is a pointer to an array of 10 integers", "optc": "ptr is an array of 10 integers", "optd": "ptr is an pointer to array", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In C, if you pass an array as an argument to a function, what actually gets passed?", "opta": "Value of elements in array", "optb": "First element of the array", "optc": "Base address of the array", "optd": "Address of the last element of array", "ans": "C", "explanation": "The statement 'C' is correct. When we pass an array as a funtion argument, the base address of the array will be passed."}, {"question": "In which numbering system can the binary number 1011011111000101 be easily converted to?", "opta": "Decimal system", "optb": "Hexadecimal system", "optc": "Octal system", "optd": "No need to convert", "ans": "B", "explanation": "Hexadecimal system is better, because each 4-digit binary represents one Hexadecimal digit."}, {"question": "Which bitwise operator is suitable for turning off a particular bit in a number?", "opta": "&& operator", "optb": "& operator", "optc": "|| operator", "optd": "!  operator", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which bitwise operator is suitable for turning on a particular bit in a number?", "opta": "&& operator", "optb": "& operator", "optc": "|| operator", "optd": "|  operator", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which bitwise operator is suitable for checking whether a particular bit is on or off?", "opta": "&& operator", "optb": "& operator", "optc": "|| operator", "optd": "!  operator", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "The maximum combined length of the command-line arguments including the spaces between adjacent arguments is", "opta": "128 characters", "optb": "256 characters", "optc": "67 characters", "optd": "It may vary from one operating system to another", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "According to ANSI specifications which is the correct way of declaring main when it receives command-line arguments?", "opta": "int main(int argc, char *argv[])", "optb": "int main(argc, argv)\nint argc; char *argv;", "optc": "int main()\n{\n    int argc; char *argv;\n}", "optd": "None of above", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the 'c' and 'v' in argv stands for?", "opta": "'c' means argument control 'v' means argument vector", "optb": "'c' means argument count 'v' means argument vertex", "optc": "'c' means argument count 'v' means argument vector", "optd": "'c' means argument configuration 'v' means argument visibility", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Declare the following statement?\r\n\"An array of three pointers to chars\".", "opta": "char *ptr[3]();", "optb": "char *ptr[3];", "optc": "char (*ptr[3])();", "optd": "char **ptr[3];", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nint *ptr[30];", "opta": "ptr is a pointer to an array of 30 integer pointers.", "optb": "ptr is a array of 30 pointers to integers.", "optc": "ptr is a array of 30 integer pointers.", "optd": "ptr is a array 30 pointers.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Declare the following statement?\r\n\"A pointer to an array of three chars\".", "opta": "char *ptr[3]();", "optb": "char (*ptr)*[3];", "optc": "char (*ptr[3])();", "optd": "char (*ptr)[3];", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nchar *arr[10];", "opta": "arr is a array of 10 character pointers.", "optb": "arr is a array of function pointer.", "optc": "arr is a array of characters.", "optd": "arr is a pointer to array of characters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nint (*pf)();", "opta": "pf is a pointer to function.", "optb": "pf is a function pointer.", "optc": "pf is a pointer to a function which return int", "optd": "pf is a function of pointer variable.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Declare the following statement?\n\"A pointer to a function which receives an int pointer and returns float pointer\".", "opta": "float *(ptr)*int;", "optb": "float *(*ptr)(int)", "optc": "float *(*ptr)(int*)", "optd": "float (*ptr)(int)", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nvoid *cmp();", "opta": "cmp is a pointer to an void type.", "optb": "cmp is a void type pointer variable.", "optc": "cmp is a function that return a void pointer.", "optd": "cmp function returns nothing.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Declare the following statement?\n\"A pointer to a function which receives nothing and returns nothing\".", "opta": "void *(ptr)*int;", "optb": "void *(*ptr)()", "optc": "void *(*ptr)(*)", "optd": "void (*ptr)()", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\r\nint *f();", "opta": "f is a pointer variable of function type.", "optb": "f is a function returning pointer to an int.", "optc": "f is a function pointer.", "optd": "f is a simple declaration of pointer variable.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nvoid (*cmp)();", "opta": "cmp is a pointer to an void function type.", "optb": "cmp is a void type pointer function.", "optc": "cmp is a function that return a void pointer.", "optd": "cmp is a pointer to a function which returns void .", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nchar **argv;", "opta": "argv is a pointer to pointer.", "optb": "argv is a pointer to a char pointer.", "optc": "argv is a function pointer.", "optd": "argv is a member of function pointer.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What do the following declaration signify?\nchar *scr;", "opta": "scr is a pointer to pointer variable.", "optb": "scr is a function pointer.", "optc": "scr is a pointer to char.", "optd": "scr is a member of function pointer.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    int y=128;\n    const int x=y;\n    printf(\"%d\\n\", x);\n    return 0;\n}", "opta": "128", "optb": "Garbage value", "optc": "Error", "optd": "0", "ans": "A", "explanation": "Step 1: int y=128; The variable 'y' is declared as an integer type and initialized to value \"128\".\n\n\nStep 2: const int x=y; The constant variable 'x' is declared as an integer and it is initialized with the variable 'y' value.\n\n\nStep 3: printf(\"%d\\n\", x); It prints the value of variable 'x'.\n\nHence the output of the program is \"128\""}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdlib.h>\n\nunion employee\n{\n    char name[15];\n    int age;\n    float salary;\n};\nconst union employee e1;\n\nint main()\n{\n    strcpy(e1.name, \"K\");\n    printf(\"%s %d %f\", e1.name, e1.age, e1.salary);\n    return 0;\n}", "opta": "Error: RValue required", "optb": "Error: cannot convert from 'const int *' to 'int *const'", "optc": "Error: LValue required in strcpy", "optd": "No error", "ans": "D", "explanation": "The output will be (in 16-bit platform DOS):\nK 75 0.000000"}, {"question": "What will be the output of the program?\n#include<stdio.h>\nint fun(int **ptr);\n\nint main()\n{\n    int i=10;\n    const int *ptr = &i;\n    fun(&ptr);\n    return 0;\n}\nint fun(int **ptr)\n{\n    int j = 223;\n    int *temp = &j;\n    printf(\"Before changing ptr = %5x\\n\", *ptr);\n    const *ptr = temp;\n    printf(\"After changing ptr = %5x\\n\", *ptr);\n    return 0;\n}", "opta": "Address of iAddress of j", "optb": "10223", "optc": "Error: cannot convert parameter 1 from 'const int **' to 'int **'", "optd": "Garbage value", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    const int x=5;\n    const int *ptrx;\n    ptrx = &x;\n    *ptrx = 10;\n    printf(\"%d\\n\", x);\n    return 0;\n}", "opta": "5", "optb": "10", "optc": "Error", "optd": "Garbage value", "ans": "C", "explanation": "Step 1: const int x=5; The constant variable x is declared as an integer data type and initialized with value '5'.\r\n\n\nStep 2: const int *ptrx; The constant variable ptrx is declared as an integer pointer.\r\n\n\nStep 3: ptrx = &x; The address of the constant variable x is assigned to integer pointer variable ptrx.\r\n\n\nStep 4: *ptrx = 10; Here we are indirectly trying to change the value of the constant vaiable x. This will result in an error.\r\n\nTo change the value of const variable x we have to use *(int *)&x = 10;"}, {"question": "What will be the output of the program in TurboC?\n#include<stdio.h>\nint fun(int **ptr);\n\nint main()\n{\n    int i=10, j=20;\n    const int *ptr = &i;\n    printf(\" i = %5X\", ptr);\n    printf(\" ptr = %d\", *ptr);\n    ptr = &j;\n    printf(\" j = %5X\", ptr);\n    printf(\" ptr = %d\", *ptr);\n    return 0;\n}", "opta": "i= FFE2 ptr=12 j=FFE4 ptr=24", "optb": "i= FFE4 ptr=10 j=FFE2 ptr=20", "optc": "i= FFE0 ptr=20 j=FFE1 ptr=30", "optd": "Garbage value", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    const char *s = \"\";\n    char str[] = \"Hello\";\n    s = str;\n    while(*s)\n        printf(\"%c\", *s++);\n\n    return 0;\n}", "opta": "Error", "optb": "H", "optc": "Hello", "optd": "Hel", "ans": "C", "explanation": "Step 1: const char *s = \"\"; The constant variable s is declared as an pointer to an array of characters type and initialized with an empty string.\n\n\nStep 2: char str[] = \"Hello\"; The variable str is declared as an array of charactrers type and initialized with a string \"Hello\".\n\n\nStep 3: s = str; The  value of the variable str is assigned to the variable s. Therefore str contains the text \"Hello\".\n\n\nStep 4: while(*s){ printf(\"%c\", *s++); } Here the while loop got executed untill the value of the variable s is available and it prints the each character of the variable s.\n\nHence the output of the program is \"Hello\"."}, {"question": "What will be the output of the program?\n#include<stdio.h>\nint get();\n\nint main()\n{\n    const int x = get();\n    printf(\"%d\", x);\n    return 0;\n}\nint get()\n{\n    return 20;\n}", "opta": "Garbage value", "optb": "Error", "optc": "20", "optd": "0", "ans": "C", "explanation": "Step 1: int get(); This is the function prototype for the funtion get(), it tells the compiler returns an integer value and accept no parameters.\n\n\nStep 2: const int x = get(); The constant variable x is declared as an integer data type and initialized with the value \"20\".\n\nThe function get() returns the value \"20\".\n\nStep 3: printf(\"%d\", x); It prints the value of the variable x.\n\nHence the output of the program is \"20\"."}, {"question": "What will be the output of the program (in Turbo C)?\n#include<stdio.h>\n\nint fun(int *f)\n{\n    *f = 10;\n    return 0;\n}\nint main()\n{\n    const int arr[5] = {1, 2, 3, 4, 5};\n    printf(\"Before modification arr[3] = %d\", arr[3]);\n    fun(&arr[3]);\n    printf(\"\\nAfter modification arr[3] = %d\", arr[3]);\n    return 0;\n}", "opta": "Before modification arr[3] = 4 After modification arr[3] = 10", "optb": "Error: cannot convert parameter 1 from const int * to int *", "optc": "Error: Invalid parameter", "optd": "Before modification arr[3] = 4 After modification arr[3] = 4", "ans": "A", "explanation": "Step 1: const int arr[5] = {1, 2, 3, 4, 5}; The constant variable arr is declared as an integer array and initialized to\n\n arr[0] = 1, arr[1] = 2, arr[2] = 3, arr[3] = 4, arr[4] = 5 \n\nStep 2: printf(\"Before modification arr[3] = %d\", arr[3]); It prints the value of arr[3] (ie. 4).\n\n\nStep 3: fun(&arr[3]); The memory location of the arr[3] is passed to fun() and arr[3] value is modified to 10.\n\nA const variable can be indirectly modified by a pointer.\n\nStep 4: printf(\"After modification arr[3] = %d\", arr[3]); It prints the value of arr[3] (ie. 10).\n\n\nHence the output of the program is\n\nBefore modification arr[3] = 4\nAfter modification arr[3] = 10"}, {"question": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    const int i=0;\n    printf(\"%d\\n\", i++);\n    return 0;\n}", "opta": "10", "optb": "11", "optc": "No output", "optd": "Error: ++needs a value", "ans": "D", "explanation": "This program will show an error \"Cannot modify a const object\".\n\n\nStep 1: const int i=0; The constant variable 'i' is declared as an integer and initialized with value of '0'(zero).\n\n\nStep 2: printf(\"%d\\n\", i++); Here the variable 'i' is increemented by 1(one). This will create an error \"Cannot modify a const object\".\n\nBecause, we cannot modify a const variable."}, {"question": "What will be the output of the program?\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    const c = -11;\r\n    const int d = 34;\r\n    printf(\"%d, %d\\n\", c, d);\r\n    return 0;\r\n}", "opta": "Error", "optb": "-11, 34", "optc": "11, 34", "optd": "None of these", "ans": "B", "explanation": "Step 1: const c = -11; The constant variable 'c' is declared and initialized to value \"-11\".\n\n\nStep 2: const int d = 34; The constant variable 'd' is declared as an integer and initialized to value '34'.\n\n\nStep 3: printf(\"%d, %d\\n\", c, d); The value of the variable 'c' and 'd' are printed.\n\nHence the output of the program is -11, 34"}, {"question": "How many times \"IndiaBIX\" is get printed?\n#include<stdio.h>\nint main()\n{\n    int x;\n    for(x=-1; x<=10; x++)\n    {\n        if(x < 5)\n            continue;\n        else\n            break;\n        printf(\"IndiaBIX\");\n    }\n    return 0;\n}", "opta": "Infinite times", "optb": "11 times", "optc": "0 times", "optd": "10 times", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many times the while loop will get executed if a short int is 2 byte wide?\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    int j=1;\r\n    while(j <= 255)\r\n    {\r\n        printf(\"%c %d\\n\", j, j);\r\n        j++;\r\n    }\r\n    return 0;\r\n}", "opta": "Infinite times", "optb": "255 times", "optc": "256 times", "optd": "254 times", "ans": "B", "explanation": "The while(j <= 255) loop will get executed 255 times. The size short int(2 byte wide) does not affect the while() loop."}, {"question": "Which of the following is not logical operator?", "opta": "&", "optb": "&&", "optc": "||", "optd": "!", "ans": "A", "explanation": "Bitwise operators:\n& is a Bitwise AND operator.\r\n\nLogical operators:\n&& is a Logical AND operator.\n|| is a Logical OR operator.\n! is a NOT operator.\n\nSo, '&' is not a Logical operator."}, {"question": "In mathematics and computer programming, which is the correct order of mathematical operators ?", "opta": "Addition, Subtraction, Multiplication, Division", "optb": "Division, Multiplication, Addition, Subtraction", "optc": "Multiplication, Addition, Division, Subtraction", "optd": "Addition, Division, Modulus, Subtraction", "ans": "B", "explanation": "Simply called as BODMAS (Brackets, Order, Division, Multiplication, Addition and Subtraction).\nMnemonics are often used to help students remember the rules, but the rules taught by the use of acronyms can be misleading. In the United States the acronym PEMDAS is common. It stands for Parentheses, Exponents, Multiplication, Division, Addition, Subtraction. In other English speaking countries, Parentheses may be called Brackets, or symbols of inclusion and Exponentiation may be called either Indices, Powers or Orders, and since multiplication and division are of equal precedence, M and D are often interchanged, leading to such acronyms as BEDMAS, BIDMAS, BODMAS, BERDMAS, PERDMAS, and BPODMAS.\nFor more info: http://en.wikipedia.org/wiki/Order_of_operations"}, {"question": "Which of the following cannot be checked in a switch-case statement?", "opta": "Character", "optb": "Integer", "optc": "Float", "optd": "enum", "ans": "C", "explanation": "The switch/case statement in the c language is defined by the language specification to use an int value, so you can not use a float value.\n\r\nswitch( expression )\r\n{\r\n    case constant-expression1:    statements 1;\r\n    case constant-expression2:    statements 2;    \r\n    case constant-expression3:    statements3 ;\r\n    ...\r\n    ...\r\n    default : statements 4;\r\n}\r\n\nThe value of the 'expression' in a switch-case statement must be an integer, char, short, long. Float and double are not allowed."}, {"question": "What will the SWAP macro in the following program be expanded to on preprocessing? will the code compile?\r\n#include<stdio.h>\r\n#define SWAP(a, b, c)(c t; t=a, a=b, b=t)\r\nint main()\r\n{\r\n    int x=10, y=20;\r\n    SWAP(x, y, int);\r\n    printf(\"%d %d\\n\", x, y);\r\n    return 0;\r\n}", "opta": "It compiles", "optb": "Compiles with an warning", "optc": "Not compile", "optd": "Compiles and print nothing", "ans": "C", "explanation": "The code won't compile since declaration of t cannot occur within parenthesis."}, {"question": "In which stage the following code #include<stdio.h>  gets replaced by the contents of the file stdio.h", "opta": "During editing", "optb": "During linking", "optc": "During execution", "optd": "During preprocessing", "ans": "D", "explanation": "The preprocessor replaces the line #include <stdio.h> with the system header file of that name. More precisely, the entire text of the file 'stdio.h' replaces the #include directive."}, {"question": "Which of the following statements should be used to obtain a remainder after dividing 3.14 by 2.1 ?", "opta": "rem = 3.14 % 2.1;", "optb": "rem = modf(3.14, 2.1);", "optc": "rem = fmod(3.14, 2.1);", "optd": "Remainder cannot be obtain in floating point division.", "ans": "C", "explanation": "fmod(x,y) - Calculates x modulo y, the remainder of x/y.\r\n\r\nThis function is the same as the modulus operator. But fmod() performs floating point divisions.\r\n\nExample:\n\r\n#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main ()\r\n{\r\n  printf (\"fmod of 3.14/2.1 is %lf\\n\", fmod (3.14,2.1) );\r\n  return 0;\r\n}\r\n\nOutput:\r\nfmod of 3.14/2.1 is 1.040000"}, {"question": "What are the types of linkages?", "opta": "Internal and External", "optb": "External, Internal and None", "optc": "External and None", "optd": "Internal", "ans": "B", "explanation": "External Linkage-> means global, non-static variables and functions.\nInternal Linkage-> means static variables and functions with file scope.\nNone Linkage-> means Local variables."}, {"question": "Which of the following special symbol allowed in a variable name?", "opta": "* (asterisk)", "optb": "| (pipeline)", "optc": "- (hyphen)", "optd": "_ (underscore)", "ans": "D", "explanation": "Variable names in C are made up of letters (upper and lower case) and digits. The underscore character (\"_\") is also permitted. Names must not begin with a digit.\nExamples of valid (but not very descriptive) C variable names:\n=> foo \n=> Bar \n=> BAZ \n=> foo_bar \n=> _foo42 \n=> _ \n=> QuUx"}, {"question": "Is there any difference between following declarations?\n\n\n1 :\nextern int fun();\n\n\n2 :\nint fun();", "opta": "Both are identical", "optb": "No difference, except extern int fun(); is probably in another file", "optc": "int fun(); is overrided with extern int fun();", "optd": "None of these", "ans": "B", "explanation": "extern int fun(); declaration in C is to indicate the existence of a global function and it is defined externally to the current module or in another file. \n\nint fun(); declaration in C is to indicate the existence of a function inside the current module or in the same file."}, {"question": "How would you round off a value from 1.66 to 2.0?", "opta": "ceil(1.66)", "optb": "floor(1.66)", "optc": "roundup(1.66)", "optd": "roundto(1.66)", "ans": "A", "explanation": "/* Example for ceil() and floor() functions: */\n\n#include<stdio.h>\n#include<math.h>\n\nint main()\n{\n    printf(\"\\n Result : %f\" , ceil(1.44) );\n    printf(\"\\n Result : %f\" , ceil(1.66) );\n \n    printf(\"\\n Result : %f\" , floor(1.44) );    \n    printf(\"\\n Result : %f\" , floor(1.66) );\n\n    return 0;\n}\n// Output:\n// Result : 2.000000\n// Result : 2.000000\n// Result : 1.000000\n// Result : 1.000000"}, {"question": "By default a real number is treated as a", "opta": "float", "optb": "double", "optc": "long double", "optd": "far double", "ans": "B", "explanation": "In computing, 'real number' often refers to non-complex floating-point numbers. It include both rational numbers, such as 42 and 3/4, and irrational numbers such as pi = 3.14159265...\n\n\nWhen the accuracy of the floating point number is insufficient, we can use the double to define the number. The double is same as float but with longer precision and takes double space (8 bytes) than float.\n\n\nTo extend the precision further we can use long double which occupies 10 bytes of memory space."}, {"question": "Which of the following is not user defined data type?\r\n\n\n1 :\nstruct book\r\n{\r\n    char name[10];\r\n    float price;\r\n    int pages;\r\n};\n\n\n2 :\nlong int l = 2.35;\n\n\n3 :\nenum day {Sun, Mon, Tue, Wed};", "opta": "1", "optb": "2", "optc": "3", "optd": "Both 1 and 2", "ans": "B", "explanation": "C data types classification are\n\n\nPrimary data types\r\n        \nint\nchar\nfloat\ndouble\nvoid\n\n\nSecondary data types (or) User-defined data type\r\n        \nArray\nPointer\nStructure\nUnion\nEnum\n\n\n\n\nSo, clearly long int l = 2.35; is not User-defined data type. (i.e.long int l = 2.35; is the answer.)"}, {"question": "Is the following statement a declaration or definition?\nextern int i;", "opta": "Declaration", "optb": "Definition", "optc": "Function", "optd": "Error", "ans": "A", "explanation": "Declaring is the way a programmer tells the compiler to expect a particular type, be it a variable, class/struct/union type, a function type (prototype) or a particular object instance. (ie. extern int i)\n                \n\nDeclaration never reserves any space for the variable or instance in the program's memory; it simply a \"hint\" to the compiler that a use of the variable or  instance is expected in the program. This hinting is technically called \"forward reference\"."}, {"question": "Identify which of the following are declarations\r\n\n\n1 :\nextern int x;\n\n\n2 :\nfloat square ( float x ) { ... }\n\n\n3 :\ndouble pow(double, double);", "opta": "1", "optb": "2", "optc": "1 and 3", "optd": "3", "ans": "C", "explanation": "extern int x; - is an external variable declaration.\r\ndouble pow(double, double); - is a function prototype declaration.\r\n\r\nTherefore, 1 and 3 are declarations. 2 is definition."}, {"question": "In the following program where is the variable a getting defined and where it is getting declared?\n#include<stdio.h>\nint main()\n{\n    extern int a;\n    printf(\"%d\\n\", a);\n    return 0;\n}\nint a=20;", "opta": "extern int a is declaration, int a = 20 is the definition", "optb": "int a = 20 is declaration, extern int a is the definition", "optc": "int a = 20 is definition, a is not defined", "optd": "a is declared, a is not defined", "ans": "A", "explanation": "- During declaration we tell the datatype of the Variable.\n- During definition the value is initialized."}, {"question": "When we mention the prototype of a function?", "opta": "Defining", "optb": "Declaring", "optc": "Prototyping", "optd": "Calling", "ans": "B", "explanation": "A function prototype in C or C++ is a declaration of a function that omits the function body but does specify the function's name, argument types and return type. While a function definition specifies what a function does, a function prototype can be thought of as specifying its interface."}, {"question": "Which of the following is the correct order of evaluation for the below expression?z = x + y * z / 4 % 2 - 1", "opta": "* / % + - =", "optb": "= * / % + -", "optc": "/ * % - + =", "optd": "*  % /  - + =", "ans": "A", "explanation": "C uses left associativity for evaluating expressions to break a tie between two operators having same precedence."}, {"question": "Which of the following correctly shows the hierarchy of arithmetic operations in C?", "opta": "/ + * -", "optb": "* - / +", "optc": "+ - / *", "optd": "/ * + -", "ans": "D", "explanation": "Simply called as BODMAS (Bracket of Division, Multiplication, Addition and Subtraction).\nHow Do I Remember ? BODMAS !\n\nB - Brackets first\nO - Orders (ie Powers and Square Roots, etc.)\nDM - Division and Multiplication (left-to-right)\nAS - Addition and Subtraction (left-to-right)"}, {"question": "Which of the following is the correct usage of conditional operators used in C?", "opta": "a>b ? c=30 : c=40;", "optb": "a>b ? c=30;", "optc": "max = a>b ? a>c?a:c:b>c?b:c", "optd": "return (a>b)?(a:b)", "ans": "C", "explanation": "Option A: assignment statements are always return in paranthesis in the case of conditional operator. It should be a>b? (c=30):(c=40);\nOption B: it is syntatically wrong.\nOption D: syntatically wrong, it should be return(a>b ? a:b); \nOption C: it uses nested conditional operator, this is logic for finding greatest number out of three numbers."}, {"question": "Which of the following is the correct order if calling functions in the below code?\na = f1(23, 14) * f2(12/4) + f3();", "opta": "f1, f2, f3", "optb": "f3, f2, f1", "optc": "Order may vary from compiler to compiler", "optd": "None of above", "ans": "C", "explanation": "Here, Multiplication will happen before the addition, but in which order the functions would be called is undefined. In an arithmetic expression the parenthesis tell the compiler which operands go with which operators but do not force the compiler to evaluate everything within the parenthesis first."}, {"question": "Which of the following are unary operators in C?\n\n\n1.\n!\n\n\n2.\nsizeof\n\n\n3.\n~\n\n\n4.\n&&", "opta": "1, 2", "optb": "1, 3", "optc": "2, 4", "optd": "1, 2, 3", "ans": "D", "explanation": "An operation with only one operand is called unary operation.\nUnary operators:\n! Logical NOT operator.\n~ bitwise NOT operator.\nsizeof Size-of operator.\n\n\n&& Logical AND is a logical operator.\r\n\nTherefore, 1, 2, 3 are unary operators."}, {"question": "In which order do the following gets evaluated\n\n\n1.\nRelational\n\n\n2.\nArithmetic\n\n\n3.\nLogical\n\n\n4.\nAssignment", "opta": "2134", "optb": "1234", "optc": "4321", "optd": "3214", "ans": "A", "explanation": "2. Arithmetic operators: *, /, %, +, - \n1. Relational operators: >, <, >=, <=, ==, !=\n3. Logical operators   : !, &&, ||\n4. Assignment operators: ="}, {"question": "What are the different types of real data type in C ?", "opta": "float, double", "optb": "short int, double, long int", "optc": "float, double, long double", "optd": "double, long int, float", "ans": "C", "explanation": "The floating point data types are called real data types. Hence float, double, and long double are real data types."}, {"question": "What will you do to treat the constant 3.14 as a long double?", "opta": "use 3.14LD", "optb": "use 3.14L", "optc": "use 3.14DL", "optd": "use 3.14LF", "ans": "B", "explanation": "Given 3.14 is a double constant.\nTo specify 3.14 as long double, we have to add L to the 3.14. (i.e 3.14L)"}, {"question": "If the binary eauivalent of 5.375 in normalised form is 0100 0000 1010 1100 0000 0000 0000 0000, what will be the output of the program (on intel machine)? \n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float a=5.375;\n    char *p;\n    int i;\n    p = (char*)&a;\n    for(i=0; i<=3; i++)\n        printf(\"%02x\\n\", (unsigned char)p[i]);\n    return 0;\n}", "opta": "40 AC 00 00", "optb": "04 CA 00 00", "optc": "00 00 AC 40", "optd": "00 00 CA 04", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following range is a valid long double (Turbo C in 16 bit DOS OS) ?", "opta": "3.4E-4932 to 1.1E+4932", "optb": "3.4E-4932 to 3.4E+4932", "optc": "1.1E-4932 to 1.1E+4932", "optd": "1.7E-4932 to 1.7E+4932", "ans": "A", "explanation": "The range of long double is 3.4E-4932 to 1.1E+4932"}, {"question": "Which statement will you add in the following program to work it correctly?\n#include<stdio.h>\nint main()\n{\n    printf(\"%f\\n\", log(36.0));\n    return 0;\n}", "opta": "#include<conio.h>", "optb": "#include<math.h>", "optc": "#include<stdlib.h>", "optd": "#include<dos.h>", "ans": "B", "explanation": "math.h is a header file in the standard library of C programming language designed for basic mathematical operations.\r\n\n\nDeclaration syntax: double log(double);"}, {"question": "We want to round off x, a float, to an int value, The correct way to do is", "opta": "y = (int)(x + 0.5)", "optb": "y = int(x + 0.5)", "optc": "y = (int)x + 0.5", "optd": "y = (int)((int)x + 0.5)", "ans": "A", "explanation": "Rounding off a value means replacing it by a nearest value that is approximately equal or smaller or greater to the given number.\r\n\n\ny = (int)(x + 0.5); here x is any float value. To roundoff, we have to typecast the value of x by using (int)\n\nExample:\n\r\n#include <stdio.h>\r\n\r\nint main ()\r\n{\r\n  float x = 3.6;\r\n  int y = (int)(x + 0.5);\r\n  printf (\"Result = %d\\n\", y );\r\n  return 0;\r\n}\r\n\n\nOutput:\r\nResult = 4."}, {"question": "The binary equivalent of 5.375 is", "opta": "101.101110111", "optb": "101.011", "optc": "101011", "optd": "None of above", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A float occupies 4 bytes. If the hexadecimal equivalent of these 4 bytes are A, B, C and D, then when this float is stored in memory in which of the following order do these bytes gets stored?", "opta": "ABCD", "optb": "DCBA", "optc": "0xABCD", "optd": "Depends on big endian or little endian architecture", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will you do to treat the constant 3.14 as a float?", "opta": "use float(3.14f)", "optb": "use 3.14f", "optc": "use f(3.14)", "optd": "use (f)(3.14)", "ans": "B", "explanation": "Given 3.14 is a double constant.\nTo specify 3.14 as float, we have to add f to the 3.14. (i.e 3.14f)"}, {"question": "Which of the following statement obtains the remainder on dividing 5.5 by 1.3 ?", "opta": "rem = (5.5 % 1.3)", "optb": "rem = modf(5.5, 1.3)", "optc": "rem = fmod(5.5, 1.3)", "optd": "Error: we can't divide", "ans": "C", "explanation": "fmod(x,y) - Calculates x modulo y, the remainder of x/y.\n\nThis function is the same as the modulus operator. But fmod() performs floating point divisions.\n\nExample:\n\n#include <stdio.h>\n#include <math.h>\n\nint main ()\n{\n  printf (\"fmod of 5.5 by 1.3 is %lf\\n\", fmod (5.5, 1.3) );\n  return 0;\n}\n\nOutput:\nfmod of 5.5 by 1.3 is 0.300000"}, {"question": "The keyword used to transfer control from a function back to the calling function is", "opta": "switch", "optb": "goto", "optc": "go back", "optd": "return", "ans": "D", "explanation": "The keyword return is used to transfer control from a function back to the calling function.\nExample:\n\n#include<stdio.h>\nint add(int, int); /* Function prototype */\n\nint main()\n{\n    int a = 4, b = 3, c;\n    c = add(a, b);\n    printf(\"c = %d\\n\", c);\n    return 0;\n}\nint add(int a, int b)\n{\n/* returns the value and control back to main() function */\n   return (a+b);\n}\n\nOutput: \nc = 7"}, {"question": "What is the notation for following functions?\n1.  int f(int a, float b)\n    {\n        /* Some code */\n    }\n\n2.  int f(a, b)\n    int a; float b;\n    {\n        /* Some code */\n    }", "opta": "1. KR Notation 2. ANSI Notation", "optb": "1. Pre ANSI C Notation 2. KR Notation", "optc": "1. ANSI Notation 2. KR Notation", "optd": "1. ANSI Notation 2. Pre ANSI Notation", "ans": "C", "explanation": "KR Notation means Kernighan and Ritche Notation."}, {"question": "How many times the program will print \"IndiaBIX\" ?\n#include<stdio.h>\n\nint main()\n{\n    printf(\"IndiaBIX\");\n    main();\n    return 0;\n}", "opta": "Infinite times", "optb": "32767 times", "optc": "65535 times", "optd": "Till stack overflows", "ans": "D", "explanation": "A call stack or function stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing.\n\nA stack overflow occurs when too much memory is used on the call stack.\nHere function main() is called repeatedly and its return address is stored in the stack. After stack memory is full. It shows stack overflow error."}, {"question": "In a file contains the line \"I am a boy\\r\\n\" then on reading this line into the array str using fgets(). What will str contain?", "opta": "\"I am a boy\\r\\n\\0\"", "optb": "\"I am a boy\\r\\0\"", "optc": "\"I am a boy\\n\\0\"", "optd": "\"I am a boy\"", "ans": "C", "explanation": "Declaration: char *fgets(char *s, int n, FILE *stream);\n\nfgets reads characters from stream into the string s. It stops when it reads either n - 1 characters or a newline character, whichever comes first.\n\nTherefore, the string str contain \"I am a boy\\n\\0\""}, {"question": "What is the purpose of \"rb\" in fopen() function used below in the code?\nFILE *fp;\nfp = fopen(\"source.txt\", \"rb\");", "opta": "open \"source.txt\" in binary mode for reading", "optb": "open \"source.txt\" in binary mode for reading and writing", "optc": "Create a new file \"source.txt\" for reading and writing", "optd": "None of above", "ans": "A", "explanation": "The file source.txt will be opened in the binary mode."}, {"question": "What does fp point to in the program ?\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    FILE *fp;\r\n    fp=fopen(\"trial\", \"r\");\r\n    return 0;\r\n}", "opta": "The first character in the file", "optb": "A structure which contains a char pointer which points to the first character of a file.", "optc": "The name of the file.", "optd": "The last character in the file.", "ans": "B", "explanation": "The fp is a structure which contains a char pointer which points to the first character of a file."}, {"question": "Which of the following operations can be performed on the file \"NOTES.TXT\" using the below code?\nFILE *fp;\nfp = fopen(\"NOTES.TXT\", \"r+\");", "opta": "Reading", "optb": "Writing", "optc": "Appending", "optd": "Read and Write", "ans": "D", "explanation": "r+ Open an existing file for update (reading and writing)."}, {"question": "To print out a and b given below, which of the following printf() statement will you use?\n#include<stdio.h>\n\nfloat a=3.14;\ndouble b=3.14;", "opta": "printf(\"%f %lf\", a, b);", "optb": "printf(\"%Lf %f\", a, b);", "optc": "printf(\"%Lf %Lf\", a, b);", "optd": "printf(\"%f %Lf\", a, b);", "ans": "A", "explanation": "To print a float value, %f is used as format specifier.\nTo print a double value, %lf is used as format specifier.\nTherefore, the answer is printf(\"%f %lf\", a, b);"}, {"question": "Which files will get closed through the fclose() in the following program?\n#include<stdio.h>\n\nint main()\n{\n    FILE *fs, *ft, *fp;\n    fp = fopen(\"A.C\", \"r\");\n    fs = fopen(\"B.C\", \"r\");\n    ft = fopen(\"C.C\", \"r\");\n    fclose(fp, fs, ft);\n    return 0;\n}", "opta": "\"A.C\" \"B.C\" \"C.C\"", "optb": "\"B.C\" \"C.C\"", "optc": "\"A.C\"", "optd": "Error in fclose()", "ans": "D", "explanation": "Extra parameter in call to fclose()."}, {"question": "On executing the below program what will be the contents of 'target.txt' file if the source file contains a line \"To err is human\"?\n#include<stdio.h>\n\nint main()\n{\n    int i, fss;\n    char ch, source[20] = \"source.txt\", target[20]=\"target.txt\", t;\n    FILE *fs, *ft;\n    fs = fopen(source, \"r\");\n    ft = fopen(target, \"w\");\n    while(1)\n    {\n        ch=getc(fs);\n        if(ch==EOF)\n            break;\n        else\n        {\n            fseek(fs, 4L, SEEK_CUR);\n            fputc(ch, ft);\n        }\n    }\n    return 0;\n}", "opta": "r n", "optb": "Trh", "optc": "err", "optd": "None of above", "ans": "B", "explanation": "The file source.txt is opened in read mode and target.txt is opened in write mode. The file source.txt contains \"To err is human\".\nInside the while loop,\n ch=getc(fs); The first character('T') of the source.txt is stored in variable ch and it's checked for EOF.\n if(ch==EOF) If EOF(End of file) is true, the loop breaks and program execution stops.\n If not EOF encountered, fseek(fs, 4L, SEEK_CUR); the file pointer advances 4 character from the current position. Hence the file pointer is in 5th character of file source.txt.\n fputc(ch, ft); It writes the character 'T' stored in variable ch to target.txt.\nThe while loop runs three times and it write the character 1st and 5th and 11th characters (\"Trh\") in the target.txt file."}, {"question": "To scan a and b given below, which of the following scanf() statement will you use?\n#include<stdio.h>\n\nfloat a;\ndouble b;", "opta": "scanf(\"%f %f\", &a, &b);", "optb": "scanf(\"%Lf %Lf\", &a, &b);", "optc": "scanf(\"%f %Lf\", &a, &b);", "optd": "scanf(\"%f %lf\", &a, &b);", "ans": "D", "explanation": "To scan a float value, %f is used as format specifier.\nTo scan a double value, %lf is used as format specifier.\nTherefore, the answer is scanf(\"%f %lf\", &a, &b);"}, {"question": "Out of fgets() and gets() which function is safe to use?", "opta": "gets()", "optb": "fgets()", "ans": "B", "explanation": "Because, In fgets() we can specify the size of the buffer into which the string supplied will be stored."}, {"question": "Consider the following program and what will be content of t?\n#include<stdio.h>\n\nint main()\n{\n    FILE *fp;\n    int t;\n    fp = fopen(\"DUMMY.C\", \"w\");\n    t = fileno(fp);\n    printf(\"%d\\n\", t);\n    return 0;\n}", "opta": "size of \"DUMMY.C\" file", "optb": "The handle associated with \"DUMMY.C\" file", "optc": "Garbage value", "optd": "Error in fileno()", "ans": "B", "explanation": "fp = fopen(\"DUMMY.C\", \"w\"); A file DUMMY.C is opened in write mode and returns the file pointer to fp\nt = fileno(fp); returns the handle for the fp stream and it stored in the variable t\nprintf(\"%d\\n\", t); It prints the handle number."}, {"question": "What will the function rewind() do?", "opta": "Reposition the file pointer to a character reverse.", "optb": "Reposition the file pointer stream to end of file.", "optc": "Reposition the file pointer to begining of that line.", "optd": "Reposition the file pointer to begining of file.", "ans": "D", "explanation": "rewind() takes the file pointer to the beginning of the file. so that the next I/O operation will take place at the beginning of the file.\n                Example: rewind(FilePointer);"}, {"question": "Input/output function prototypes and macros are defined in which header file?", "opta": "conio.h", "optb": "stdlib.h", "optc": "stdio.h", "optd": "dos.h", "ans": "C", "explanation": "stdio.h, which stands for \"standard input/output header\", is the header in the C standard library that contains macro definitions, constants, and declarations of functions and types used for various standard input and output operations."}, {"question": "Which standard library function will you use to find the last occurance of a character in a string in C?", "opta": "strnchar()", "optb": "strchar()", "optc": "strrchar()", "optd": "strrchr()", "ans": "D", "explanation": "strrchr() returns a pointer to the last occurrence of character in a string.\nExample:\n\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\nint main()\r\n{\r\n    char str[30] = \"12345678910111213\";\r\n    printf(\"The last position of '2' is %d.\\n\",\r\n            strrchr(str, '2') - str);\r\n    return 0;\r\n}\r\n\nOutput: The last position of '2' is 14."}, {"question": "What is stderr ?", "opta": "standard error", "optb": "standard error types", "optc": "standard error streams", "optd": "standard error definitions", "ans": "C", "explanation": "The standard error(stderr) stream is the default destination for error messages and other diagnostic warnings. Like stdout, it is usually also directed to the output device of the standard console (generally, the screen)."}, {"question": "Does there any function exist to convert the int or float to a string?", "opta": "Yes", "optb": "No", "ans": "A", "explanation": "1. itoa() converts an integer to a string.\n2. ltoa() converts a long to a string.\n3. ultoa() converts an unsigned long to a string.\n4. sprintf() sends formatted output to a string, so it can be used to convert any type of values to string type.\n#include<stdio.h>\n#include<stdlib.h>\n\nint main(void)\n{\n   int   num1 = 12345;\n   float num2 = 5.12;\n   char str1[20];\n   char str2[20];\n\n   itoa(num1, str1, 10); /* 10 radix value */\n   printf(\"integer = %d string = %s \\n\", num1, str1);\n\n   sprintf(str2, \"%f\", num2);\n   printf(\"float = %f string = %s\", num2, str2);\n\n   return 0;\n}\n\n// Output:\n// integer = 12345 string = 12345\n// float = 5.120000 string = 5.120000"}, {"question": "What is the purpose of fflush() function.", "opta": "flushes all streams and specified streams.", "optb": "flushes only specified stream.", "optc": "flushes input/output buffer.", "optd": "flushes file buffer.", "ans": "A", "explanation": "\"fflush()\" flush any buffered output associated with filename, which is either a file opened for writing or a shell command for redirecting output to a pipe or coprocess.\nExample: fflush(FilePointer);\nfflush(NULL); flushes all streams."}, {"question": "Can you use the fprintf() to display the output on the screen?", "opta": "Yes", "optb": "No", "ans": "A", "explanation": "Do like this fprintf(stdout, \"%s %d %f\", str, i, a);"}, {"question": "What will the function randomize() do in Turbo C under DOS?", "opta": "returns a random number.", "optb": "returns a random number generator in the specified range.", "optc": "returns a random number generator with a random value based on time.", "optd": "return a random number with a given seed value.", "ans": "C", "explanation": "The randomize() function initializes the random number generator with a random value based on time. You can try the sample program given below in Turbo-C, it may not work as expected in other compilers.\n/* Prints a random number in the range 0 to 99 */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    randomize();\n    printf(\"Random number in the 0-99 range: %d\\n\", random (100));\n    return 0;\n}"}, {"question": "Which header file should be included to use functions like malloc() and calloc()?", "opta": "memory.h", "optb": "stdlib.h", "optc": "string.h", "optd": "dos.h", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What function should be used to free the memory allocated by calloc() ?", "opta": "dealloc();", "optb": "malloc(variable_name, 0)", "optc": "free();", "optd": "memalloc(variable_name, 0)", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How will you free the memory allocated by the following program?\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXROW 3\n#define MAXCOL 4\n\nint main()\n{\n    int **p, i, j;\n    p = (int **) malloc(MAXROW * sizeof(int*));\n    return 0;\n}", "opta": "memfree(int p);", "optb": "dealloc(p);", "optc": "malloc(p, 0);", "optd": "free(p);", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Specify the 2 library functions to dynamically allocate memory?", "opta": "malloc() and memalloc()", "optb": "alloc() and memalloc()", "optc": "malloc() and calloc()", "optd": "memalloc() and faralloc()", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What is (void*)0?", "opta": "Representation of NULL pointer", "optb": "Representation of void pointer", "optc": "Error", "optd": "None of above", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Can you combine the following two statements into one?\nchar *p;\np = (char*) malloc(100);", "opta": "char p = *malloc(100);", "optb": "char *p = (char) malloc(100);", "optc": "char *p = (char*)malloc(100);", "optd": "char *p = (char *)(malloc*)(100);", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In which header file is the NULL macro defined?", "opta": "stdio.h", "optb": "stddef.h", "optc": "stdio.h and stddef.h", "optd": "math.h", "ans": "C", "explanation": "The macro \"NULL\" is defined in locale.h, stddef.h, stdio.h, stdlib.h, string.h, time.h, and wchar.h."}, {"question": "How many bytes are occupied by near, far and huge pointers (DOS)?", "opta": "near=2 far=4 huge=4", "optb": "near=4 far=8 huge=8", "optc": "near=2 far=4 huge=8", "optd": "near=4 far=4 huge=8", "ans": "A", "explanation": "near=2, far=4 and huge=4 pointers exist only under DOS. Under windows and Linux every pointers is 4 bytes long."}, {"question": "If a variable is a pointer to a structure, then which of the following operator is used to access data members of the structure through the pointer variable?", "opta": ".", "optb": "&", "optc": "*", "optd": "->", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What would be the equivalent pointer expression for referring the array element a[i][j][k][l]", "opta": "((((a+i)+j)+k)+l)", "optb": "*(*(*(*(a+i)+j)+k)+l)", "optc": "(((a+i)+j)+k+l)", "optd": "((a+i)+j+k+l)", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A pointer is", "opta": "A keyword used to create variables", "optb": "A variable that stores address of an instruction", "optc": "A variable that stores address of other variable", "optd": "All of the above", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "The operator used to get value at address stored in a pointer variable is", "opta": "*", "optb": "&", "optc": "&&", "optd": "||", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function sets first n characters of a string to a given character?", "opta": "strinit()", "optb": "strnset()", "optc": "strset()", "optd": "strcset()", "ans": "B", "explanation": "Declaration:\nchar *strnset(char *s, int ch, size_t n); Sets the first n characters of s to ch\n#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n   char *string = \"abcdefghijklmnopqrstuvwxyz\";\n   char letter = 'x';\n\n   printf(\"string before strnset: %s\\n\", string);\n   strnset(string, letter, 13);\n   printf(\"string after  strnset: %s\\n\", string);\n\n   return 0;\n}\n\nOutput:\nstring before strnset: abcdefghijklmnopqrstuvwxyz\nstring after  strnset: xxxxxxxxxxxxxnopqrstuvwxyz"}, {"question": "If the two strings are identical, then strcmp() function returns", "opta": "-1", "optb": "1", "optc": "0", "optd": "Yes", "ans": "C", "explanation": "Declaration: strcmp(const char *s1, const char*s2);\nThe strcmp return an int value that is\nif s1 <  s2 returns a value < 0\nif s1 == s2 returns 0\nif s1 > s2 returns a value > 0"}, {"question": "How will you print \\n on the screen?", "opta": "printf(\"\\n\");", "optb": "echo \"\\\\n\";", "optc": "printf('\\n');", "optd": "printf(\"\\\\n\");", "ans": "D", "explanation": "The statement printf(\"\\\\n\"); prints '\\n' on the screen."}, {"question": "The library function used to find the last occurrence of a character in a string is", "opta": "strnstr()", "optb": "laststr()", "optc": "strrchr()", "optd": "strstr()", "ans": "C", "explanation": "Declaration: char *strrchr(const char *s, int c);\n It scans a string s in the reverse direction, looking for a specific character c. \nExample:\n#include <string.h>\n#include <stdio.h>\n\nint main(void)\n{\n   char text[] = \"I learn through IndiaBIX.com\";\n   char *ptr, c = 'i';\n\n   ptr = strrchr(text, c);\n   if (ptr)\n      printf(\"The position of '%c' is: %d\\n\", c, ptr-text);\n   else\n      printf(\"The character was not found\\n\");\n   return 0;\n}\n\nOutput:\nThe position of 'i' is: 19"}, {"question": "Which of the following function is used to find the first occurrence of a given string in another string?", "opta": "strchr()", "optb": "strrchr()", "optc": "strstr()", "optd": "strnset()", "ans": "C", "explanation": "The function strstr() Finds the first occurrence of a substring in another string\n\n\nDeclaration: char *strstr(const char *s1, const char *s2);\n\n\nReturn Value:\nOn success, strstr returns a pointer to the element in s1 where s2 begins (points to s2 in s1).\nOn error (if s2 does not occur in s1), strstr returns null.\n\nExample:\n#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n   char *str1 = \"IndiaBIX\", *str2 = \"ia\", *ptr;\n\n   ptr = strstr(str1, str2);\n   printf(\"The substring is: %s\\n\", ptr);\n   return 0;\n}\n\nOutput: The substring is: iaBIX"}, {"question": "Which of the following function is more appropriate for reading in a multi-word string?", "opta": "printf();", "optb": "scanf();", "optc": "gets();", "optd": "puts();", "ans": "C", "explanation": "gets(); collects a string of characters terminated by a new line from the standard input stream stdin\n\n#include <stdio.h>\n\nint main(void)\n{\n   char string[80];\n\n   printf(\"Enter a string:\");\n   gets(string);\n   printf(\"The string input was: %s\\n\", string);\n   return 0;\n}\n\nOutput:\nEnter a string: IndiaBIX\nThe string input was: IndiaBIX"}, {"question": "Which of the following function is correct that finds the length of a string?", "opta": "int xstrlen(char *s)\n{\n    int length=0;\n    while(*s!='\\0')\n    {    length++; s++; }\n    return (length);\n}", "optb": "int xstrlen(char s)\n{\n    int length=0;\n    while(*s!='\\0')\n        length++; s++;\n    return (length);\n}", "optc": "int xstrlen(char *s)\r\n{\r\n    int length=0;\r\n    while(*s!='\\0')\r\n        length++;\r\n    return (length);\r\n}", "optd": "int xstrlen(char *s)\r\n{\r\n    int length=0;\r\n    while(*s!='\\0')\r\n        s++;\r\n    return (length);\r\n}", "ans": "A", "explanation": "Option A is the correct function to find the length of given string.\nExample:\n#include<stdio.h>\n\nint xstrlen(char *s)\n{\n    int length=0;\n    while(*s!='\\0')\n    { length++; s++; }\n    return (length);\n}\n\nint main()\n{\n    char d[] = \"IndiaBIX\";\n    printf(\"Length = %d\\n\", xstrlen(d));\n    return 0;\n}\n\nOutput: Length = 8"}, {"question": "How will you free the allocated memory ?", "opta": "remove(var-name);", "optb": "free(var-name);", "optc": "delete(var-name);", "optd": "dalloc(var-name);", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What is the similarity between a structure, union and enumeration?", "opta": "All of them let you define new values", "optb": "All of them let you define new data types", "optc": "All of them let you define new pointers", "optd": "All of them let you define new structures", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In the following code, the P2 is Integer Pointer or Integer?\r\ntypedef int *ptr;\r\nptr p1, p2;", "opta": "Integer", "optb": "Integer pointer", "optc": "Error in declaration", "optd": "None of above", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In the following code what is 'P'?\ntypedef char *charp;\nconst charp P;", "opta": "P is a constant", "optb": "P is a character constant", "optc": "P is character type", "optd": "None of above", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What is x in the following program?\n#include<stdio.h>\n\nint main()\n{\n    typedef char (*(*arrfptr[3])())[10];\n    arrfptr x;\n    return 0;\n}", "opta": "x is a pointer", "optb": "x is an array of three pointer", "optc": "x is an array of three function pointers", "optd": "Error in x declaration", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdarg.h>\nvoid fun(char *msg, ...);\n\nint main()\n{\n    fun(\"IndiaBIX\", 1, 4, 7, 11, 0);\n    return 0;\n}\nvoid fun(char *msg, ...)\n{\n    va_list ptr;\n    int num;\n    va_start(ptr, msg);\n    num = va_arg(ptr, int);\n    num = va_arg(ptr, int);\n    printf(\"%d\", num);\n}", "opta": "IndiaBIX 1 7 11 0", "optb": "1", "optc": "4", "optd": "7", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdarg.h>\nvoid fun1(char, int, int *, float *, char *);\nvoid fun2(char ch, ...);\nvoid (*p1)(char, int, int *, float *, char *);\nvoid (*p2)(char ch, ...);\n\nint main()\n{\n    char ch='A'; int i=10;\n    float f=3.14; char *p=\"Hello\";\n    p1=fun1;\n    p2=fun2;\n    (*p1)(ch, i, &i, &f, p);\n    (*p2)(ch, i, &i, &f, p);\n    return 0;\n}\nvoid fun1(char ch, int i, int *pi, float *pf, char *p)\n{\n    printf(\"%c %d %d %f %s \\n\", ch, i, *pi, *pf, p);\n}\nvoid fun2(char ch, ...)\n{\n    int i, *pi; float *pf; char *p;\n    va_list list;\n    printf(\"%c \", ch);\n    va_start(list, ch);\n    i = va_arg(list, int);\n    printf(\"%d \", i);\n    \n    pi = va_arg(list, int*);\n    printf(\"%d \", *pi);\n    pf = va_arg(list, float*);\n    printf(\"%f \", *pf);\n    p = va_arg(list, char *);\n    printf(\"%s\", p);\n}", "opta": "A 10 3.14\nA 10 3.14", "optb": "A 10 10 3.140000 Hello\nA 10 10 3.140000 Hello", "optc": "A 10 Hello\nA 10 Hello", "optd": "Error", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdarg.h>\nvoid dumplist(int, ...);\n\nint main()\n{\n    dumplist(2, 4, 8);\n    dumplist(3, 6, 9, 7);\n    return 0;\n}\nvoid dumplist(int n, ...)\n{\n    va_list p; int i;\n    va_start(p, n);\n\n    while(n-->0)\n    {\n        i = va_arg(p, int);\n        printf(\"%d\", i);\n    }\n    va_end(p);\n    printf(\"\\n\");\n}", "opta": "2 4\n3 6", "optb": "2 4 8\n3, 6, 9, 7", "optc": "4 8\n6 9 7", "optd": "1 1 1\n1 1 1 1", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdarg.h>\nvoid display(int num, ...);\n\nint main()\n{\n    display(4, 'A', 'B', 'C', 'D');\n    return 0;\n}\nvoid display(int num, ...)\n{\n    char c, c1; int j;\n    va_list ptr, ptr1;\n    va_start(ptr, num);\n    va_start(ptr1, num);\n    for(j=1; j<=num; j++)\n    {\n        c = va_arg(ptr, int);\n        printf(\"%c\", c);\n        c1 = va_arg(ptr1, int);\n        printf(\"%d\\n\", c1);\n    }\n}", "opta": "A, AB, BC, CD, D", "optb": "A, aB, bC, cD, d", "optc": "A, 65B, 66C, 67D, 68", "optd": "A, 0B, 0C, 0C, 0", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the program?\n#include<stdio.h>\n#include<stdarg.h>\nvoid fun1(int num, ...);\nvoid fun2(int num, ...);\n\nint main()\n{\n    fun1(1, \"Apple\", \"Boys\", \"Cats\", \"Dogs\");\n    fun2(2, 12, 13, 14);\n    return 0;\n}\nvoid fun1(int num, ...)\n{\n    char *str;\n    va_list ptr;\n    va_start(ptr, num);\n    str = va_arg(ptr, char *);\n    printf(\"%s \", str);\n}\nvoid fun2(int num, ...)\n{\n    va_list ptr;\n    va_start(ptr, num);\n    num = va_arg(ptr, int);\n    printf(\"%d\", num);\n}", "opta": "Dogs 12", "optb": "Cats 14", "optc": "Boys 13", "optd": "Apple 12", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}]]}
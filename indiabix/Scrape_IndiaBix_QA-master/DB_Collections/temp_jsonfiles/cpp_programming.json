{"test_questions": [[{"question": "A constructor that accepts __________ parameters is called the default constructor.", "opta": "one", "optb": "two", "optc": "no", "optd": "three", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What happens when a class with parameterized constructors and having no default constructor is used in a program and we create an object that needs a zero-argument constructor?", "opta": "Compile-time error.", "optb": "Preprocessing error.", "optc": "Runtime error.", "optd": "Runtime exception.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Can a class have virtual destructor?", "opta": "Yes", "optb": "No", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Destructor has the same name as the constructor and it is preceded by ______ .", "opta": "!", "optb": "?", "optc": "~", "optd": "$", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For automatic objects, constructors and destructors are called each time the objects", "opta": "enter and leave scope", "optb": "inherit parent class", "optc": "are constructed", "optd": "are destroyed", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which constructor function is designed to copy objects of the same class type?", "opta": "Create constructor", "optb": "Object constructor", "optc": "Dynamic constructor", "optd": "Copy constructor", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructor has the same name as that of the class.", "optb": "Destructor has the same name as that of the class with a tilde symbol at the beginning.", "optc": "Both A and B.", "optd": "Destructor has the same name as the first member function of the class.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Constructor is a member function of the class.", "optb": "The compiler always provides a zero argument constructor.", "optc": "It is necessary that a constructor in a class should always be public.", "optd": "Both B and C.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "When are the Global objects destroyed?", "opta": "When the control comes out of the block in which they are being used.", "optb": "When the program terminates.", "optc": "When the control comes out of the function in which they are being used.", "optd": "As soon as local objects die.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Copy constructor must receive its arguments by __________ .", "opta": "either pass-by-value or pass-by-reference", "optb": "only pass-by-value", "optc": "only pass-by-reference", "optd": "only pass by address", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A function with the same name as the class, but preceded with a tilde character (~) is called __________ of that class.", "opta": "constructor", "optb": "destructor", "optc": "function", "optd": "object", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A union that has no constructor can be initialized with another union of __________ type.", "opta": "different", "optb": "same", "optc": "virtual", "optd": "class", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following gets called when an object goes out of scope?", "opta": "constructor", "optb": "destructor", "optc": "main", "optd": "virtual function", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Destructor destroys only integer data members of the object.", "optb": "Destructor destroys only float data members of the object.", "optc": "Destructor destroys only pointer data members of the object.", "optd": "Destructor destroys the complete object.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "__________ used to make a copy of one class object from another class object of the same class type.", "opta": "constructor", "optb": "copy constructor", "optc": "destructor", "optd": "default constructor", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Constructors __________ to allow different approaches of object construction.", "opta": "cannot overloaded", "optb": "can be overloaded", "optc": "can be called", "optd": "can be nested", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A destructor has the same name as the class in which it is present.", "optb": "A destructor has a different name than the class in which it is present.", "optc": "A destructor always returns an integer.", "optd": "A destructor can be overloaded.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following cannot be declared as virtual?", "opta": "Constructor", "optb": "Destructor", "optc": "Data Members", "optd": "Both A and C", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "If the copy constructor receives its arguments by value, the copy constructor would", "opta": "call one-argument constructor of the class", "optb": "work without any problem", "optc": "call itself recursively", "optd": "call zero-argument constructor", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following are NOT provided by the compiler by default?", "opta": "Zero-argument Constructor", "optb": "Destructor", "optc": "Copy Constructor", "optd": "Copy Destructor", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "It is a __________ error to pass arguments to a destructor.", "opta": "logical", "optb": "virtual", "optc": "syntax", "optd": "linker", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "If the programmer does not explicitly provide a destructor, then which of the following creates an empty destructor?", "opta": "Preprocessor", "optb": "Compiler", "optc": "Linker", "optd": "main() function", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A __________ is a constructor that either has no parameters, or if it has parameters, all the parameters have default values.", "opta": "default constructor", "optb": "copy constructor", "optc": "Both A and B", "optd": "None of these", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many default constructors per class are possible?", "opta": "Only one", "optb": "Two", "optc": "Three", "optd": "Unlimited", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct about destructors?", "opta": "A destructor has void return type.", "optb": "A destructor has integer return type.", "optc": "A destructor has no return type.", "optd": "A destructors return type is always same as that of main().", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A constructor has the same name as the class in which it is present.", "optb": "A constructor has a different name than the class in which it is present.", "optc": "A constructor always returns an integer.", "optd": "A constructor cannot be overloaded.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following implicitly creates a default constructor when the programmer does not explicitly define at least one constructor for a class?", "opta": "Preprocessor", "optb": "Linker", "optc": "Loader", "optd": "Compiler", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A destructor takes __________ arguments.", "opta": "one", "optb": "two", "optc": "three", "optd": "no", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Destructor calls are made in which order of the corresponding constructor calls?", "opta": "Reverse order", "optb": "Forward order", "optc": "Depends on how the object is constructed", "optd": "Depends on how many objects are constructed", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following never requires any arguments?", "opta": "Member function", "optb": "Friend function", "optc": "Default constructor", "optd": "const function", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A class's __________ is called when an object is destroyed.", "opta": "constructor", "optb": "destructor", "optc": "assignment function", "optd": "copy constructor", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Destructors __________ for automatic objects if the program terminates with a call to function exit or function abort.", "opta": "are called", "optb": "are inherited", "optc": "are not called", "optd": "are created", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A constructor of a derived class can access any public and protected member of the base class.", "optb": "Constructor cannot be inherited but the derived class can call them.", "optc": "A constructor of a derived class cannot access any public and protected member of the base class.", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct?", "opta": "Constructor is always called explicitly.", "optb": "Constructor is called either implicitly or explicitly, whereas destructor is always called implicitly.", "optc": "Destructor is always called explicitly.", "optd": "Constructor and destructor functions are not called at all as they are always inline.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many times a constructor is called in the life-time of an object?", "opta": "Only once", "optb": "Twice", "optc": "Thrice", "optd": "Depends on the way of creation of object", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following gets called when an object is being created?", "opta": "constructor", "optb": "virtual function", "optc": "destructor", "optd": "main", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "To ensure that every object in the array receives a destructor call, always delete memory allocated as an array with operator __________ .", "opta": "destructor", "optb": "delete", "optc": "delete[]", "optd": "kill[]", "opte": "free[]", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct about constructors?", "opta": "A constructor has a return type.", "optb": "A constructor cannot contain a function call.", "optc": "A constructor has no return type.", "optd": "A constructor has a void return type.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct whenever an object goes out of scope?", "opta": "The default constructor of the object is called.", "optb": "The parameterized destructor is called.", "optc": "The default destructor of the object is called.", "optd": "None of the above.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function prototype is perfectly acceptable?", "opta": "int Function(int Tmp = Show());", "optb": "float Function(int Tmp = Show(int, float));", "optc": "Both A and B.", "optd": "float = Show(int, float) Function(Tmp);", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ enables to define functions that take constants as an argument.", "optb": "We cannot change the argument of the function that that are declared as constant.", "optc": "Both A and B.", "optd": "We cannot use the constant while defining the function.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can have at most one default argument.", "optb": "An overloaded function cannot have default argument.", "optc": "All arguments of an overloaded function can be default.", "optd": "A function if overloaded more than once cannot have default argument.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "optb": "Overloaded function must have default arguments.", "optc": "Overloaded function must have default arguments starting from the left of argument list.", "optd": "A function can be overloaded more than once.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement will be correct if the function has three arguments passed to it?", "opta": "The trailing argument will be the default argument.", "optb": "The first argument will be the default argument.", "optc": "The middle argument will be the default argument.", "optd": "All the argument will be the default argument.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Default arguments can be provided for pointers to functions.", "optb": "A function can have all its arguments as default.", "optc": "Default argument cannot be provided for pointers to functions.", "optd": "A default argument cannot be redefined in later declaration.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructors can have default parameters.", "optb": "Constructors cannot have default parameters.", "optc": "Constructors cannot have more than one default parameter.", "optd": "Constructors can have at most five default parameters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / type of function cannot be overloaded?", "opta": "Member function", "optb": "Static function", "optc": "Virtual function", "optd": "Both B and C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function declaration is/are incorrect?", "opta": "int Sum(int a, int b = 2, int c = 3);", "optb": "int Sum(int a = 5, int b);", "optc": "int Sum(int a = 0, int b, int c = 3);", "optd": "Both B and C are incorrect.", "opte": "All are correct.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "The default value for an argument can be a global constant.", "optb": "The default arguments are given in the function prototype.", "optc": "Compiler uses the prototype information to build a call, not the function definition.", "optd": "The default arguments are given in the function prototype and should be repeated in the function definition.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Where the default value of parameter have to be specified?", "opta": "Function call", "optb": "Function definition", "optc": "Function prototype", "optd": "Both B or C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The default value for an argument cannot be function call.", "optb": "C++ allows the redefinition of a default parameter.", "optc": "Both A and B.", "optd": "C++ does not allow the redefinition of a default parameter.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Only one parameter of a function can be a default parameter.", "optb": "Minimum one parameter of a function must be a default parameter.", "optc": "All the parameters of a function can be default parameters.", "optd": "No parameter of a function can be default.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "A default argument is checked for type at the time of declaration and evaluated at the time of call.", "optb": "We can provide a default value to a particular argument in the middle of an argument list.", "optc": "We cannot provide a default value to a particular argument in the middle of an argument list.", "optd": "Default arguments are useful in situations where some arguments always have the same value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can accept same number of arguments.", "optb": "Overloaded functions always return value of same data type.", "optc": "Overloaded functions can accept only same number and same type of arguments.", "optd": "Overloaded functions can accept only different number and different type of arguments.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / types of function cannot have default parameters?", "opta": "Member function of class", "optb": "main()", "optc": "Member function of structure", "optd": "Both B and C", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The order of the default argument will be right to left.", "optb": "The order of the default argument will be left to right.", "optc": "The order of the default argument will be alternate.", "optd": "The order of the default argument will be random.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function prototype is perfectly acceptable?", "opta": "int Function(int Tmp = Show());", "optb": "float Function(int Tmp = Show(int, float));", "optc": "Both A and B.", "optd": "float = Show(int, float) Function(Tmp);", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ enables to define functions that take constants as an argument.", "optb": "We cannot change the argument of the function that that are declared as constant.", "optc": "Both A and B.", "optd": "We cannot use the constant while defining the function.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can have at most one default argument.", "optb": "An overloaded function cannot have default argument.", "optc": "All arguments of an overloaded function can be default.", "optd": "A function if overloaded more than once cannot have default argument.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "optb": "Overloaded function must have default arguments.", "optc": "Overloaded function must have default arguments starting from the left of argument list.", "optd": "A function can be overloaded more than once.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement will be correct if the function has three arguments passed to it?", "opta": "The trailing argument will be the default argument.", "optb": "The first argument will be the default argument.", "optc": "The middle argument will be the default argument.", "optd": "All the argument will be the default argument.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Default arguments can be provided for pointers to functions.", "optb": "A function can have all its arguments as default.", "optc": "Default argument cannot be provided for pointers to functions.", "optd": "A default argument cannot be redefined in later declaration.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructors can have default parameters.", "optb": "Constructors cannot have default parameters.", "optc": "Constructors cannot have more than one default parameter.", "optd": "Constructors can have at most five default parameters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / type of function cannot be overloaded?", "opta": "Member function", "optb": "Static function", "optc": "Virtual function", "optd": "Both B and C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function declaration is/are incorrect?", "opta": "int Sum(int a, int b = 2, int c = 3);", "optb": "int Sum(int a = 5, int b);", "optc": "int Sum(int a = 0, int b, int c = 3);", "optd": "Both B and C are incorrect.", "opte": "All are correct.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "The default value for an argument can be a global constant.", "optb": "The default arguments are given in the function prototype.", "optc": "Compiler uses the prototype information to build a call, not the function definition.", "optd": "The default arguments are given in the function prototype and should be repeated in the function definition.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Where the default value of parameter have to be specified?", "opta": "Function call", "optb": "Function definition", "optc": "Function prototype", "optd": "Both B or C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The default value for an argument cannot be function call.", "optb": "C++ allows the redefinition of a default parameter.", "optc": "Both A and B.", "optd": "C++ does not allow the redefinition of a default parameter.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Only one parameter of a function can be a default parameter.", "optb": "Minimum one parameter of a function must be a default parameter.", "optc": "All the parameters of a function can be default parameters.", "optd": "No parameter of a function can be default.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "A default argument is checked for type at the time of declaration and evaluated at the time of call.", "optb": "We can provide a default value to a particular argument in the middle of an argument list.", "optc": "We cannot provide a default value to a particular argument in the middle of an argument list.", "optd": "Default arguments are useful in situations where some arguments always have the same value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can accept same number of arguments.", "optb": "Overloaded functions always return value of same data type.", "optc": "Overloaded functions can accept only same number and same type of arguments.", "optd": "Overloaded functions can accept only different number and different type of arguments.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / types of function cannot have default parameters?", "opta": "Member function of class", "optb": "main()", "optc": "Member function of structure", "optd": "Both B and C", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The order of the default argument will be right to left.", "optb": "The order of the default argument will be left to right.", "optc": "The order of the default argument will be alternate.", "optd": "The order of the default argument will be random.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function prototype is perfectly acceptable?", "opta": "int Function(int Tmp = Show());", "optb": "float Function(int Tmp = Show(int, float));", "optc": "Both A and B.", "optd": "float = Show(int, float) Function(Tmp);", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ enables to define functions that take constants as an argument.", "optb": "We cannot change the argument of the function that that are declared as constant.", "optc": "Both A and B.", "optd": "We cannot use the constant while defining the function.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can have at most one default argument.", "optb": "An overloaded function cannot have default argument.", "optc": "All arguments of an overloaded function can be default.", "optd": "A function if overloaded more than once cannot have default argument.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "optb": "Overloaded function must have default arguments.", "optc": "Overloaded function must have default arguments starting from the left of argument list.", "optd": "A function can be overloaded more than once.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement will be correct if the function has three arguments passed to it?", "opta": "The trailing argument will be the default argument.", "optb": "The first argument will be the default argument.", "optc": "The middle argument will be the default argument.", "optd": "All the argument will be the default argument.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Default arguments can be provided for pointers to functions.", "optb": "A function can have all its arguments as default.", "optc": "Default argument cannot be provided for pointers to functions.", "optd": "A default argument cannot be redefined in later declaration.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructors can have default parameters.", "optb": "Constructors cannot have default parameters.", "optc": "Constructors cannot have more than one default parameter.", "optd": "Constructors can have at most five default parameters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / type of function cannot be overloaded?", "opta": "Member function", "optb": "Static function", "optc": "Virtual function", "optd": "Both B and C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function declaration is/are incorrect?", "opta": "int Sum(int a, int b = 2, int c = 3);", "optb": "int Sum(int a = 5, int b);", "optc": "int Sum(int a = 0, int b, int c = 3);", "optd": "Both B and C are incorrect.", "opte": "All are correct.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "The default value for an argument can be a global constant.", "optb": "The default arguments are given in the function prototype.", "optc": "Compiler uses the prototype information to build a call, not the function definition.", "optd": "The default arguments are given in the function prototype and should be repeated in the function definition.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Where the default value of parameter have to be specified?", "opta": "Function call", "optb": "Function definition", "optc": "Function prototype", "optd": "Both B or C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The default value for an argument cannot be function call.", "optb": "C++ allows the redefinition of a default parameter.", "optc": "Both A and B.", "optd": "C++ does not allow the redefinition of a default parameter.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Only one parameter of a function can be a default parameter.", "optb": "Minimum one parameter of a function must be a default parameter.", "optc": "All the parameters of a function can be default parameters.", "optd": "No parameter of a function can be default.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "A default argument is checked for type at the time of declaration and evaluated at the time of call.", "optb": "We can provide a default value to a particular argument in the middle of an argument list.", "optc": "We cannot provide a default value to a particular argument in the middle of an argument list.", "optd": "Default arguments are useful in situations where some arguments always have the same value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can accept same number of arguments.", "optb": "Overloaded functions always return value of same data type.", "optc": "Overloaded functions can accept only same number and same type of arguments.", "optd": "Overloaded functions can accept only different number and different type of arguments.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / types of function cannot have default parameters?", "opta": "Member function of class", "optb": "main()", "optc": "Member function of structure", "optd": "Both B and C", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The order of the default argument will be right to left.", "optb": "The order of the default argument will be left to right.", "optc": "The order of the default argument will be alternate.", "optd": "The order of the default argument will be random.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function prototype is perfectly acceptable?", "opta": "int Function(int Tmp = Show());", "optb": "float Function(int Tmp = Show(int, float));", "optc": "Both A and B.", "optd": "float = Show(int, float) Function(Tmp);", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ enables to define functions that take constants as an argument.", "optb": "We cannot change the argument of the function that that are declared as constant.", "optc": "Both A and B.", "optd": "We cannot use the constant while defining the function.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can have at most one default argument.", "optb": "An overloaded function cannot have default argument.", "optc": "All arguments of an overloaded function can be default.", "optd": "A function if overloaded more than once cannot have default argument.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "optb": "Overloaded function must have default arguments.", "optc": "Overloaded function must have default arguments starting from the left of argument list.", "optd": "A function can be overloaded more than once.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement will be correct if the function has three arguments passed to it?", "opta": "The trailing argument will be the default argument.", "optb": "The first argument will be the default argument.", "optc": "The middle argument will be the default argument.", "optd": "All the argument will be the default argument.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Default arguments can be provided for pointers to functions.", "optb": "A function can have all its arguments as default.", "optc": "Default argument cannot be provided for pointers to functions.", "optd": "A default argument cannot be redefined in later declaration.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructors can have default parameters.", "optb": "Constructors cannot have default parameters.", "optc": "Constructors cannot have more than one default parameter.", "optd": "Constructors can have at most five default parameters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / type of function cannot be overloaded?", "opta": "Member function", "optb": "Static function", "optc": "Virtual function", "optd": "Both B and C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function declaration is/are incorrect?", "opta": "int Sum(int a, int b = 2, int c = 3);", "optb": "int Sum(int a = 5, int b);", "optc": "int Sum(int a = 0, int b, int c = 3);", "optd": "Both B and C are incorrect.", "opte": "All are correct.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "The default value for an argument can be a global constant.", "optb": "The default arguments are given in the function prototype.", "optc": "Compiler uses the prototype information to build a call, not the function definition.", "optd": "The default arguments are given in the function prototype and should be repeated in the function definition.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Where the default value of parameter have to be specified?", "opta": "Function call", "optb": "Function definition", "optc": "Function prototype", "optd": "Both B or C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The default value for an argument cannot be function call.", "optb": "C++ allows the redefinition of a default parameter.", "optc": "Both A and B.", "optd": "C++ does not allow the redefinition of a default parameter.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Only one parameter of a function can be a default parameter.", "optb": "Minimum one parameter of a function must be a default parameter.", "optc": "All the parameters of a function can be default parameters.", "optd": "No parameter of a function can be default.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "A default argument is checked for type at the time of declaration and evaluated at the time of call.", "optb": "We can provide a default value to a particular argument in the middle of an argument list.", "optc": "We cannot provide a default value to a particular argument in the middle of an argument list.", "optd": "Default arguments are useful in situations where some arguments always have the same value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can accept same number of arguments.", "optb": "Overloaded functions always return value of same data type.", "optc": "Overloaded functions can accept only same number and same type of arguments.", "optd": "Overloaded functions can accept only different number and different type of arguments.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / types of function cannot have default parameters?", "opta": "Member function of class", "optb": "main()", "optc": "Member function of structure", "optd": "Both B and C", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The order of the default argument will be right to left.", "optb": "The order of the default argument will be left to right.", "optc": "The order of the default argument will be alternate.", "optd": "The order of the default argument will be random.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function prototype is perfectly acceptable?", "opta": "int Function(int Tmp = Show());", "optb": "float Function(int Tmp = Show(int, float));", "optc": "Both A and B.", "optd": "float = Show(int, float) Function(Tmp);", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ enables to define functions that take constants as an argument.", "optb": "We cannot change the argument of the function that that are declared as constant.", "optc": "Both A and B.", "optd": "We cannot use the constant while defining the function.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can have at most one default argument.", "optb": "An overloaded function cannot have default argument.", "optc": "All arguments of an overloaded function can be default.", "optd": "A function if overloaded more than once cannot have default argument.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "optb": "Overloaded function must have default arguments.", "optc": "Overloaded function must have default arguments starting from the left of argument list.", "optd": "A function can be overloaded more than once.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement will be correct if the function has three arguments passed to it?", "opta": "The trailing argument will be the default argument.", "optb": "The first argument will be the default argument.", "optc": "The middle argument will be the default argument.", "optd": "All the argument will be the default argument.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "Default arguments can be provided for pointers to functions.", "optb": "A function can have all its arguments as default.", "optc": "Default argument cannot be provided for pointers to functions.", "optd": "A default argument cannot be redefined in later declaration.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Constructors can have default parameters.", "optb": "Constructors cannot have default parameters.", "optc": "Constructors cannot have more than one default parameter.", "optd": "Constructors can have at most five default parameters.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / type of function cannot be overloaded?", "opta": "Member function", "optb": "Static function", "optc": "Virtual function", "optd": "Both B and C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function declaration is/are incorrect?", "opta": "int Sum(int a, int b = 2, int c = 3);", "optb": "int Sum(int a = 5, int b);", "optc": "int Sum(int a = 0, int b, int c = 3);", "optd": "Both B and C are incorrect.", "opte": "All are correct.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "The default value for an argument can be a global constant.", "optb": "The default arguments are given in the function prototype.", "optc": "Compiler uses the prototype information to build a call, not the function definition.", "optd": "The default arguments are given in the function prototype and should be repeated in the function definition.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Where the default value of parameter have to be specified?", "opta": "Function call", "optb": "Function definition", "optc": "Function prototype", "optd": "Both B or C", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The default value for an argument cannot be function call.", "optb": "C++ allows the redefinition of a default parameter.", "optc": "Both A and B.", "optd": "C++ does not allow the redefinition of a default parameter.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Only one parameter of a function can be a default parameter.", "optb": "Minimum one parameter of a function must be a default parameter.", "optc": "All the parameters of a function can be default parameters.", "optd": "No parameter of a function can be default.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is incorrect?", "opta": "A default argument is checked for type at the time of declaration and evaluated at the time of call.", "optb": "We can provide a default value to a particular argument in the middle of an argument list.", "optc": "We cannot provide a default value to a particular argument in the middle of an argument list.", "optd": "Default arguments are useful in situations where some arguments always have the same value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Overloaded functions can accept same number of arguments.", "optb": "Overloaded functions always return value of same data type.", "optc": "Overloaded functions can accept only same number and same type of arguments.", "optd": "Overloaded functions can accept only different number and different type of arguments.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following function / types of function cannot have default parameters?", "opta": "Member function of class", "optb": "main()", "optc": "Member function of structure", "optd": "Both B and C", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "The order of the default argument will be right to left.", "optb": "The order of the default argument will be left to right.", "optc": "The order of the default argument will be alternate.", "optd": "The order of the default argument will be random.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What happens when we try to compile the class definition in following code snippet?\nclass Birds {};\nclass Peacock : protected Birds {};", "opta": "It will not compile because class body of Birds is not defined.", "optb": "It will not compile because class body of Peacock is not defined.", "optc": "It will not compile because a class cannot be protectedly inherited from other class.", "optd": "It will compile succesfully.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is incorrect?", "opta": "Friend keyword can be used in the class to allow access to another class.", "optb": "Friend keyword can be used for a function in the public section of a class.", "optc": "Friend keyword can be used for a function in the private section of a class.", "optd": "Friend keyword can be used on main().", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct regarding destructor of base class?", "opta": "Destructor of base class should always be static.", "optb": "Destructor of base class should always be virtual.", "optc": "Destructor of base class should not be virtual.", "optd": "Destructor of base class should always be private.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following two entities (reading from Left to Right) can be connected by the dot operator?", "opta": "A class member and a class object.", "optb": "A class object and a class.", "optc": "A class and a member of that class.", "optd": "A class object and a member of that class.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How can we make a class abstract?", "opta": "By making all member functions constant.", "optb": "By making at least one member function as pure virtual function.", "optc": "By declaring it abstract using the static keyword.", "optd": "By declaring it abstract using the virtual keyword.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct when a class is inherited publicly?", "opta": "Public members of the base class become protected members of derived class.", "optb": "Public members of the base class become private members of derived class.", "optc": "Private members of the base class become protected members of derived class.", "optd": "Public members of the base class become public members of derived class.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the constructors and destructors?", "opta": "Destructors can take arguments but constructors cannot.", "optb": "Constructors can take arguments but destructors cannot.", "optc": "Destructors can be overloaded but constructors cannot be overloaded.", "optd": "Constructors and destructors can both return a value.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following access specifies is used in a class definition by default?", "opta": "Protected", "optb": "Public", "optc": "Private", "optd": "Friend", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct with respect to the use of friend keyword inside a class?", "opta": "A private data member can be declared as a friend.", "optb": "A class may be declared as a friend.", "optc": "An object may be declared as a friend.", "optd": "We can use friend keyword as a class name.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following keywords is used to control access to a class member?", "opta": "Default", "optb": "Break", "optc": "Protected", "optd": "Asm", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following can access private data members or member functions of a class?", "opta": "Any function in the program.", "optb": "All global functions in the program.", "optc": "Any member function of that class.", "optd": "Only public member functions of that class.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following type of data member can be shared by all instances of its class?", "opta": "Public", "optb": "Inherited", "optc": "Static", "optd": "Friend", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following also known as an instance of a class?", "opta": "Friend Functions", "optb": "Object", "optc": "Member Functions", "optd": "Member Variables", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Constructor is executed when _____.", "opta": "an object is created", "optb": "an object is used", "optc": "a class is declared", "optd": "an object goes out of scope.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements about virtual base classes is correct?", "opta": "It is used to provide multiple inheritance.", "optb": "It is used to avoid multiple copies of base class in derived class.", "optc": "It is used to allow multiple copies of base class in a derived class.", "optd": "It allows private members of the base class to be inherited in the derived class.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many objects can be created from an abstract class?", "opta": "Zero", "optb": "One", "optc": "Two", "optd": "As many as we want", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What does the class definitions in following code represent?\nclass Bike\n{\n    Engine objEng;\n};\nclass Engine\n{\n    float CC;\n};", "opta": "kind of relationship", "optb": "has a relationship", "optc": "Inheritance", "optd": "Both A and B", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct when a class is inherited privately?", "opta": "Public members of the base class become protected members of derived class.", "optb": "Public members of the base class become private members of derived class.", "optc": "Private members of the base class become private members of derived class.", "optd": "Public members of the base class become public members of derived class.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?", "opta": "Data items in a class must be private.", "optb": "Both data and functions can be either private or public.", "optc": "Member functions of a class must be private.", "optd": "Constructor of a class cannot be private.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What does a class hierarchy depict?", "opta": "It shows the relationships between the classes in the form of an organization chart.", "optb": "It describes \"has a\" relationships.", "optc": "It describes \"kind of\" relationships.", "optd": "It shows the same relationship as a family tree.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following can be overloaded?", "opta": "Object", "optb": "Functions", "optc": "Operators", "optd": "Both B and C", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following means \"The use of an object of one class in definition of another class\"?", "opta": "Encapsulation", "optb": "Inheritance", "optc": "Composition", "optd": "Abstraction", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the only technical difference between structures and classes in C++?", "opta": "Member function and data are by default protected in structures but private in classes.", "optb": "Member function and data are by default private in structures but public in classes.", "optc": "Member function and data are by default public in structures but private in classes.", "optd": "Member function and data are by default public in structures but protected in classes.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the program given below?\nclass Bix\n{\n    public:\n    static void MyFunction();\n};\nint main()\n{\n    void(*ptr)() = &Bix::MyFunction;\n    return 0; \n}", "opta": "The program reports an error as pointer to member function cannot be defined outside the definition of class.", "optb": "The program reports an error as pointer to static member function cannot be defined.", "optc": "The program reports an error as pointer to member function cannot be defined without object.", "optd": "The program reports linker error.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct for a static member function?\n  It can access only other static members of its class.\n  It can be called using the class name, instead of objects.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following type of class allows only one object of it to be created?", "opta": "Virtual class", "optb": "Abstract class", "optc": "Singleton class", "optd": "Friend class", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is not a type of constructor?", "opta": "Copy constructor", "optb": "Friend constructor", "optc": "Default constructor", "optd": "Parameterized constructor", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?", "opta": "Base class pointer cannot point to derived class.", "optb": "Derived class pointer cannot point to base class.", "optc": "Pointer to derived class cannot be created.", "optd": "Pointer to base class cannot be created.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is not the member of class?", "opta": "Static function", "optb": "Friend function", "optc": "Const function", "optd": "Virtual function", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts means determining at runtime what method to invoke?", "opta": "Data hiding", "optb": "Dynamic Typing", "optc": "Dynamic binding", "optd": "Dynamic loading", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following term is used for a function defined inside a class?", "opta": "Member Variable", "optb": "Member function", "optc": "Class function", "optd": "Classic function", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concept of oops allows compiler to insert arguments in a function call if it is not specified?", "opta": "Call by value", "optb": "Call by reference", "optc": "Default arguments", "optd": "Call by pointer", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many instances of an abstract class can be created?", "opta": "1", "optb": "5", "optc": "13", "optd": "0", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following cannot be friend?", "opta": "Function", "optb": "Class", "optc": "Object", "optd": "Operator function", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts of OOPS means exposing only necessary information to client?", "opta": "Encapsulation", "optb": "Abstraction", "optc": "Data hiding", "optd": "Data binding", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Why reference is not same as a pointer?", "opta": "A reference can never be null.", "optb": "A reference once established cannot be changed.", "optc": "Reference doesn't need an explicit dereferencing mechanism.", "optd": "All of the above.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "cout is a/an __________ .", "opta": "operator", "optb": "function", "optc": "object", "optd": "macro", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts provides facility of using object of one class inside another class?", "opta": "Encapsulation", "optb": "Abstraction", "optc": "Composition", "optd": "Inheritance", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How many types of polymorphisms are supported by C++?", "opta": "1", "optb": "2", "optc": "3", "optd": "4", "ans": "B", "explanation": "The two main types of polymorphism are run-time (implemented as inheritance and virtual functions), and compile-time (implemented as templates)."}, {"question": "Which of the following is an abstract data type?", "opta": "int", "optb": "double", "optc": "string", "optd": "Class", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts means adding new components to a program as it runs?", "opta": "Data hiding", "optb": "Dynamic typing", "optc": "Dynamic binding", "optd": "Dynamic loading", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A constructor is called at the time of declaration of an object.", "optb": "A constructor is called at the time of use of an object.", "optc": "A constructor is called at the time of declaration of a class.", "optd": "A constructor is called at the time of use of a class.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following correctly describes overloading of functions?", "opta": "Virtual polymorphism", "optb": "Transient polymorphism", "optc": "Ad-hoc polymorphism", "optd": "Pseudo polymorphism", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following approach is adapted by C++?", "opta": "Top-down", "optb": "Bottom-up", "optc": "Right-left", "optd": "Left-right", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is correct about function overloading?", "opta": "The types of arguments are different.", "optb": "The order of argument is different.", "optc": "The number of argument is same.", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is correct about class and structure?", "opta": "class can have member functions while structure cannot.", "optb": "class data members are public by default while that of structure are private.", "optc": "Pointer to structure or classes cannot be declared.", "optd": "class data members are private by default while that of structure are public by default.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts means wrapping up of data and functions together?", "opta": "Abstraction", "optb": "Encapsulation", "optc": "Inheritance", "optd": "Polymorphism", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts means waiting until runtime to determine which function to call?", "opta": "Data hiding", "optb": "Dynamic casting", "optc": "Dynamic binding", "optd": "Dynamic loading", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How \"Late binding\" is implemented in C++?", "opta": "Using C++ tables", "optb": "Using Virtual tables", "optc": "Using Indexed virtual tables", "optd": "Using polymorphic tables", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following operator is overloaded for object cout?", "opta": ">>", "optb": "<<", "optc": "+", "optd": "=", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct class of the object cout?", "opta": "iostream", "optb": "istream", "optc": "ostream", "optd": "ifstream", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following cannot be used with the keyword virtual?", "opta": "class", "optb": "member functions", "optc": "constructor", "optd": "destructor", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following functions are performed by a constructor?", "opta": "Construct a new class", "optb": "Construct a new object", "optc": "Construct a new function", "optd": "Initialize objects", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following problem causes an exception?", "opta": "Missing semicolon in statement in main().", "optb": "A problem in calling function.", "optc": "A syntax error.", "optd": "A run-time error.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which one of the following options is correct about the statement given below? The compiler checks the type of reference in the object and not the type of object.", "opta": "Inheritance", "optb": "Polymorphism", "optc": "Abstraction", "optd": "Encapsulation", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct way of declaring a function as constant?", "opta": "const int ShowData(void) { /* statements */ }", "optb": "int const ShowData(void) { /* statements */ }", "optc": "int ShowData(void) const { /* statements */ }", "optd": "Both A and B", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following concepts is used to implement late binding?", "opta": "Virtual function", "optb": "Operator function", "optc": "Const function", "optd": "Static function", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "C++ allows static type checking.", "optb": "C++ allows dynamic type checking.", "optc": "C++ allows static member function be of type const.", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following factors supports the statement that reusability is a desirable feature of a language?", "opta": "It decreases the testing time.", "optb": "It lowers the maintenance cost.", "optc": "It reduces the compilation time.", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following ways are legal to access a class data member using this pointer?", "opta": "this->x", "optb": "this.x", "optc": "*this.x", "optd": "*this-x", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is a mechanism of static polymorphism?", "opta": "Operator overloading", "optb": "Function overloading", "optc": "Templates", "optd": "All of the above", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is correct about the statements given below?\n  All operators can be overloaded in C++.\n  We can change the basic meaning of an operator in C++.", "opta": "Only I is true.", "optb": "Both I and II are false.", "optc": "Only II is true.", "optd": "Both I and II are true.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What happens if the base and derived class contains definition of a function with same prototype?", "opta": "Compiler reports an error on compilation.", "optb": "Only base class function will get called irrespective of object.", "optc": "Only derived class function will get called irrespective of object.", "optd": "Base class object will call base class function and derived class object will call derived class function.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following are available only in the class hierarchy chain?", "opta": "Public data members", "optb": "Private data members", "optc": "Protected data members", "optd": "Member functions", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is not a type of inheritance?", "opta": "Multiple", "optb": "Multilevel", "optc": "Distributive", "optd": "Hierarchical", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following operators cannot be overloaded?", "opta": "[]", "optb": "->", "optc": "?:", "optd": "*", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In which of the following a virtual call is resolved at the time of compilation?", "opta": "From inside the destructor.", "optb": "From inside the constructor.", "optc": "From inside the main().", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements regarding inline functions is correct?", "opta": "It speeds up execution.", "optb": "It slows down execution.", "optc": "It increases the code size.", "optd": "Both A and C.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which one of the following is the correct way to declare a pure virtual function?", "opta": "virtual void Display(void){0};", "optb": "virtual void Display = 0;", "optc": "virtual void Display(void) = 0;", "optd": "void Display(void) = 0;", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following header file includes definition of cin and cout?", "opta": "istream.h", "optb": "ostream.h", "optc": "iomanip.h", "optd": "iostream.h", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following keyword is used to overload an operator?", "opta": "overload", "optb": "operator", "optc": "friend", "optd": "override", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will happen if a class is not having any name?", "opta": "It cannot have a destructor.", "optb": "It cannot have a constructor.", "optc": "It is not allowed.", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which inheritance type is used in the class given below?  class A : public X, public Y {}", "opta": "Multilevel inheritance", "optb": "Multiple inheritance", "optc": "Hybrid inheritance", "optd": "Hierarchical Inheritance", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which one of the following is correct about the statements given below?\n  All function calls are resolved at compile-time in Procedure Oriented Programming.\n  All function calls are resolved at compile-time in OOPS.", "opta": "Only II is correct.", "optb": "Both I and II are correct.", "optc": "Only I is correct.", "optd": "Both I and II are incorrect.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is an invalid visibility label while inheriting a class?", "opta": "public", "optb": "private", "optc": "protected", "optd": "friend", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which one of the following options is correct?", "opta": "Friend function can access public data members of the class.", "optb": "Friend function can access protected data members of the class.", "optc": "Friend function can access private data members of the class.", "optd": "All of the above.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct in C++?", "opta": "Classes cannot have data as protected members.", "optb": "Structures can have functions as members.", "optc": "Class members are public by default.", "optd": "Structure members are private by default.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is used to make an abstract class?", "opta": "Declaring it abstract using static keyword.", "optb": "Declaring it abstract using virtual keyword.", "optc": "Making at least one member function as virtual function.", "optd": "Making at least one member function as pure virtual function.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following access specifier is used as a default in a class definition?", "opta": "protected", "optb": "public", "optc": "private", "optd": "friend", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What is correct about the static data member of a class?", "opta": "A static member function can access only static data members of a class.", "optb": "A static data member is shared among all the object of the class.", "optc": "A static data member can be accessed directly from main().", "optd": "Both A and B.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following provides a reuse mechanism?", "opta": "Abstraction", "optb": "Inheritance", "optc": "Dynamic binding", "optd": "Encapsulation", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Class is an instance of object.", "optb": "Object is an instance of a class.", "optc": "Class is an instance of data type.", "optd": "Object is an instance of data type.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A reference is stored on heap.", "optb": "A reference is stored on stack.", "optc": "A reference is stored in a queue.", "optd": "A reference is stored in a binary tree.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.\n  A reference is not a constant pointer.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Functions can be declared to return a reference type. There are reasons to make such a declaration/Which of the following reasons are correct?\n  The information being returned is a large enough object that returning a reference is more efficient than returning a copy. \n  The type of the function must be a R-value.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  Change a reference changes the referent.\n  We can create an array of references.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct about the references?", "opta": "A reference must always be initialized within functions.", "optb": "A reference must always be initialized outside all functions.", "optc": "A reference must always be initialized.", "optd": "Both A and C.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A reference is declared using the _____ symbol.", "opta": "&&", "optb": "&", "optc": "||", "optd": "!", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "Once a reference variable has been defined to refer to a particular variable it can refer\nto any other variable.", "optb": "A reference is indicated by using && operator.", "optc": "Once a reference variable has been defined to refer to a particular variable it cannot refer to any other variable.", "optd": "A reference can be declared beforehand and initialized later.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  A reference is not a constant pointer.\n  A referenced is automatically de-referenced.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  An array of references is acceptable.\n  We can also create a reference to a reference.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A referenced has to be de-referenced to access a value.", "optb": "A referenced does not need to be de-referenced to access a value.", "optc": "A referenced has to be double de-referenced to access a value.", "optd": "Whether a reference should be de-referenced or not depends on the type of the reference.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  Once the variable and the reference are linked they are tied together.\n  Once the reference of a variable is declared another reference of that variable is not allowed.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  We can return a global variable by reference.\n  We cannot return a local variable by reference.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Reference is like a _____.", "opta": "Pointer", "optb": "Structure", "optc": "Macro", "optd": "Enum", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A reference is a constant pointer.", "optb": "A reference is not a constant pointer.", "optc": "An array of references is acceptable.", "optd": "It is possible to create a reference to a reference.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "A reference is declared using * operator.", "optb": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.", "optc": "A reference must always be initialized within classes.", "optd": "A variable can have multiple references.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statement is correct?", "opta": "An array of references is acceptable.", "optb": "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.", "optc": "An array of references is not acceptable.", "optd": "Reference is like a structure.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct?\n  Pointer to a reference and reference to a pointer both are valid.\n  When we use reference, we are actually referring to a referent.", "opta": "Only 1 is correct.", "optb": "Only 2 is correct.", "optc": "Both 1 and 2 are correct.", "optd": "Both 1 and 2 are incorrect.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}]]}
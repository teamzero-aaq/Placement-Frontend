{"test_questions": [[{"question": "Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?", "opta": "TreeMap", "optb": "HashMap", "optc": "LinkedHashMap", "optd": "The answer depends on the implementation of the existing instance.", "ans": "C", "explanation": "The iteration order of a Collection is the order in which an iterator moves through the elements of the Collection. The iteration order of a LinkedHashMap is determined by the order in which elements are inserted. \nWhen a new LinkedHashMap is created by passing a reference to an existing Collection to the constructor of a LinkedHashMap the Collection.addAll method will ultimately be invoked. \nThe addAll method uses an iterator to the existing Collection to iterate through the elements of the existing Collection and add each to the instance of the new LinkedHashMap. \nSince the iteration order of the LinkedHashMap is determined by the order of insertion, the iteration order of the new LinkedHashMap must be the same as the interation order of the old Collection."}, {"question": "Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?", "opta": "java.lang.String", "optb": "java.lang.Double", "optc": "java.lang.StringBuffer", "optd": "java.lang.Character", "ans": "C", "explanation": "java.lang.StringBuffer is the only class in the list that uses the default methods provided by class Object."}, {"question": "Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?", "opta": "java.util.HashSet", "optb": "java.util.LinkedHashSet", "optc": "java.util.List", "optd": "java.util.ArrayList", "ans": "D", "explanation": "All of the collection classes allow you to grow or shrink the size of your collection. ArrayList provides an index to its elements. The newer collection classes tend not to have synchronized methods. Vector is an older implementation of ArrayList functionality and has synchronized methods; it is slower than ArrayList."}, {"question": "You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?", "opta": "java.util.Map", "optb": "java.util.Set", "optc": "java.util.List", "optd": "java.util.Collection", "ans": "B", "explanation": "Option B is correct. A set is a collection that contains no duplicate elements. The iterator returns the elements in no particular order (unless this set is an instance of some class that provides a guarantee). A map cannot contain duplicate keys but it may contain duplicate values. List and Collection allow duplicate elements. \nOption A is wrong. A map is an object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value. The Map interface provides three collection views, which allow a map's contents to be viewed as a set of keys, collection of values, or set of key-value mappings. The order of a map is defined as the order in which the iterators on the map's collection views return their elements. Some map implementations, like the TreeMap class, make specific guarantees as to their order (ascending key order); others, like the HashMap class, do not (does not guarantee that the order will remain constant over time).\nOption C is wrong. A list is an ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list. Unlike sets, lists typically allow duplicate elements.\nOption D is wrong. A collection is also known as a sequence. The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list. Unlike sets, lists typically allow duplicate elements."}, {"question": "Which interface does java.util.Hashtable implement?", "opta": "Java.util.Map", "optb": "Java.util.List", "optc": "Java.util.HashTable", "optd": "Java.util.Collection", "ans": "A", "explanation": "Hash table based implementation of the Map interface."}, {"question": "Which interface provides the capability to store objects using a key-value pair?", "opta": "Java.util.Map", "optb": "Java.util.Set", "optc": "Java.util.List", "optd": "Java.util.Collection", "ans": "A", "explanation": "An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value."}, {"question": "Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?", "opta": "java.util.ArrayList", "optb": "java.util.LinkedHashMap", "optc": "java.util.HashMap", "optd": "java.util.TreeMap", "ans": "B", "explanation": "LinkedHashMap is the collection class used for caching purposes. FIFO is another way to indicate caching behavior. To retrieve LinkedHashMap elements in cached order, use the values() method and iterate over the resultant collection."}, {"question": "Which collection class allows you to access its elements by associating a key with an element's value, and provides synchronization?", "opta": "java.util.SortedMap", "optb": "java.util.TreeMap", "optc": "java.util.TreeSet", "optd": "java.util.Hashtable", "ans": "D", "explanation": "Hashtable is the only class listed that provides synchronized methods. If you need synchronization great; otherwise, use HashMap, it's faster."}, {"question": "Which is valid declaration of a float?", "opta": "float f = 1F;", "optb": "float f = 1.0;", "optc": "float f = \"1\";", "optd": "float f = 1.0d;", "ans": "A", "explanation": "Option A is valid declaration of float.\nOption B is incorrect because any literal number with a decimal point u declare the computer will implicitly cast to double unless you include \"F or f\"\nOption C is incorrect because it is a String.\nOption D is incorrect because \"d\" tells the computer it is a double so therefore you are trying to put a double value into a float variable i.e there might be a loss of precision."}, {"question": "/* Missing Statement ? */\npublic class foo \n{\n    public static void main(String[]args)throws Exception \n    {\n        java.io.PrintWriter out = new java.io.PrintWriter(); \n        new java.io.OutputStreamWriter(System.out,true); \n        out.println(\"Hello\"); \n    } \n}\n\nWhat line of code should replace the missing statement to make this program compile?", "opta": "No statement required.", "optb": "import java.io.*;", "optc": "include java.io.*;", "optd": "import java.io.PrintWriter;", "ans": "A", "explanation": "The usual method for using/importing the java packages/classes is by using an import statement at the top of your code. However it is possible to explicitly import the specific class that you want to use as you use it which is shown in the code above. The disadvantage of this however is that every time you create a new object you will have to use the class path in the case \"java.io\" then the class name in the long run leading to a lot more typing."}, {"question": "What is the numerical range of char?", "opta": "0 to 32767", "optb": "0 to 65535", "optc": "-256 to 255", "optd": "-32768 to 32767", "ans": "B", "explanation": "The char type is integral but unsigned. The range of a variable of type char is from 0 to 216-1 or 0 to 65535. Java characters are Unicode, which is a 16-bit encoding capable of representing a wide range of international characters. If the most significant nine bits of a char are 0, then the encoding is the same as seven-bit ASCII."}, {"question": "Which of the following are Java reserved words?\n\nrun\nimport\ndefault\nimplement", "opta": "1 and 2", "optb": "2 and 3", "optc": "3 and 4", "optd": "2 and 4", "ans": "B", "explanation": "(2) - This is a Java keyword\n(3) - This is a Java keyword \n(1) - Is incorrect because although it is a method of Thread/Runnable it is not a keyword \n(4) - This is not a Java keyword the keyword is implements"}]]}
{"test_questions": [[{"question": "Which four options describe the correct default values for array elements of the types indicated?\n\nint -> 0\nString -> \"null\"\nDog -> null\nchar -> '\\u0000'\nfloat -> 0.0f\nboolean -> true", "opta": "1, 2, 3, 4", "optb": "1, 3, 4, 5", "optc": "2, 4, 5, 6", "optd": "3, 4, 5, 6", "ans": "B", "explanation": "(1), (3), (4), (5) are the correct statements.\n(2) is wrong because the default value for a String (and any other object reference) is null, with no quotes.\n(6) is wrong because the default value for boolean elements is false."}, {"question": "Which one of these lists contains only Java programming language keywords?", "opta": "class, if, void, long, Int, continue", "optb": "goto, instanceof, native, finally, default, throws", "optc": "try, virtual, throw, final, volatile, transient", "optd": "strictfp, constant, super, implements, do", "opte": "byte, break, assert, switch, include", "ans": "B", "explanation": "All the words in option B are among the 49 Java keywords. Although goto reserved as a keyword in Java, goto is not used and has no function.\nOption A is wrong because the keyword for the primitive int starts with a lowercase i.\nOption C is wrong because \"virtual\" is a keyword in C++, but not Java.\nOption D is wrong because \"constant\" is not a keyword. Constants in Java are marked static and final.\nOption E is wrong because \"include\" is a keyword in C, but not in  Java."}, {"question": "Which will legally declare, construct, and initialize an array?", "opta": "int [] myList = {\"1\", \"2\", \"3\"};", "optb": "int [] myList = (5, 8, 2);", "optc": "int myList [] [] = {4,9,7,0};", "optd": "int myList [] = {4, 3, 7};", "ans": "D", "explanation": "The only legal array declaration and assignment statement is Option D\nOption A is wrong because it initializes an int array with String literals.\nOption B is wrong because it use something other than curly braces for the initialization.\nOption C is wrong because it provides initial values for only one dimension, although the declared array is a two-dimensional array."}, {"question": "Which is a reserved word in the Java programming language?", "opta": "method", "optb": "native", "optc": "subclasses", "optd": "reference", "opte": "array", "ans": "B", "explanation": "The word \"native\" is a valid keyword, used to modify a method declaration.\nOption A, D and E are not keywords. Option C is wrong because the keyword for subclassing in Java is extends, not 'subclasses'."}, {"question": "Which is a valid keyword in java?", "opta": "interface", "optb": "string", "optc": "Float", "optd": "unsigned", "ans": "A", "explanation": "interface is a valid keyword.\nOption B is wrong because although \"String\" is a class type in Java, \"string\" is not a keyword.\nOption C is wrong because \"Float\" is a class type. The keyword for the Java primitive is float.\nOption D is wrong because \"unsigned\" is a keyword in C/C++ but not in Java."}, {"question": "Which three are legal array declarations?\n\nint [] myScores [];\nchar [] myChars;\nint [6] myScores;\nDog myDogs [];\nDog myDogs [7];", "opta": "1, 2, 4", "optb": "2, 4, 5", "optc": "2, 3, 4", "optd": "All are correct.", "ans": "A", "explanation": "(1), (2), and (4) are legal array declarations. With an array declaration, you can place the brackets to the right or left of the identifier. Option A looks strange, but it's perfectly legal to split the brackets in a multidimensional array, and place them on both sides of the identifier. Although coding this way would only annoy your fellow programmers, for the exam, you need to know it's legal.\n(3) and (5) are wrong because you can't declare an array with a size. The size is only needed when the array is actually instantiated (and the JVM needs to know how much space to allocate for the array, based on the type of array and the size)."}, {"question": "public interface Foo \n{ \n    int k = 4; /* Line 3 */\n}\n\nWhich three piece of codes are equivalent to line 3?\n\nfinal int k = 4;\npublic int k = 4;\nstatic int k = 4;\nabstract int k = 4;\nvolatile int k = 4;\nprotected int k = 4;", "opta": "1, 2 and 3", "optb": "2, 3 and 4", "optc": "3, 4 and 5", "optd": "4, 5 and 6", "ans": "A", "explanation": "(1), (2) and (3) are correct. Interfaces can have constants, which are always implicitly public, static, and final. Interface constant declarations of public, static, and final are optional in any combination."}, {"question": "Which one of the following will declare an array and initialize it with five numbers?", "opta": "Array a = new Array(5);", "optb": "int [] a = {23,22,21,20,19};", "optc": "int a [] = new int[5];", "optd": "int [5] array;", "ans": "B", "explanation": "Option B is the legal way to declare and initialize an array with five elements.\nOption A is wrong because it shows an example of instantiating a class named Array, passing the integer value 5 to the object's constructor. If you don't see the brackets, you can be certain there is no actual array object! In other words, an Array object (instance of class Array) is not the same as an array object.\nOption C is wrong because it shows a legal array declaration, but with no initialization.\nOption D is wrong (and will not compile) because it declares an array with a size. Arrays must never be given a size when declared."}, {"question": "Which three are valid declarations of a char?\n\nchar c1 = 064770;\nchar c2 = 'face';\nchar c3 = 0xbeef;\nchar c4 = \\u0022;\nchar c5 = '\\iface';\nchar c6 = '\\uface';", "opta": "1, 2, 4", "optb": "1, 3, 6", "optc": "3, 5", "optd": "5 only", "ans": "B", "explanation": "(1), (3), and (6) are correct. char c1 = 064770; is an octal representation of the integer value 27128, which is legal because it fits into an unsigned 16-bit integer. char c3 = 0xbeef; is a hexadecimal representation of the integer value 48879, which fits into an unsigned 16-bit integer. char c6 = '\\uface'; is a Unicode representation of a character.\n\nchar c2 = 'face'; is wrong because you can't put more than one character in a char literal. The only other acceptable char literal that can go between single quotes is a Unicode value, and Unicode literals must always start with a '\\u'.\nchar c4 = \\u0022; is wrong because the single quotes are missing.\nchar c5 = '\\iface'; is wrong because it appears to be a Unicode representation (notice the backslash), but starts with '\\i' rather than '\\u'."}, {"question": "Which is the valid declarations within an interface definition?", "opta": "public double methoda();", "optb": "public final double methoda();", "optc": "static void methoda(double d1);", "optd": "protected void methoda(double d1);", "ans": "A", "explanation": "Option A is correct. A public access modifier is acceptable. The method prototypes in an interface are all abstract by virtue of their declaration, and should not be declared abstract.\nOption B is wrong. The final modifier means that this method cannot be constructed in a subclass. A final method cannot be abstract. \nOption C is wrong. static is concerned with the class and not an instance. \nOption D is wrong. protected is not permitted when declaring a method of an interface. See information below. \nMember declarations in an interface disallow the use of some declaration modifiers; you cannot use transient, volatile, or synchronized in a member declaration in an interface. Also, you may not use the private and protected specifiers when declaring members of an interface."}, {"question": "Which one is a valid declaration of a boolean?", "opta": "boolean b1 = 0;", "optb": "boolean b2 = 'false';", "optc": "boolean b3 = false;", "optd": "boolean b4 = Boolean.false();", "opte": "boolean b5 = no;", "ans": "C", "explanation": "A boolean can only be assigned the literal true or false."}, {"question": "Which three are valid declarations of a float?\n\nfloat f1 = -343;\nfloat f2 = 3.14;\nfloat f3 = 0x12345;\nfloat f4 = 42e7;\nfloat f5 = 2001.0D;\nfloat f6 = 2.81F;", "opta": "1, 2, 4", "optb": "2, 3, 5", "optc": "1, 3, 6", "optd": "2, 4, 6", "ans": "C", "explanation": "(1) and (3) are integer literals (32 bits), and integers can be legally assigned to floats (also 32 bits). (6) is correct because (F) is appended to the literal, declaring it as a float rather than a double (the default for floating point literals).\n(2), (4),and (5) are all doubles."}, {"question": "Which is a valid declarations of a String?", "opta": "String s1 = null;", "optb": "String s2 = 'null';", "optc": "String s3 = (String) 'abc';", "optd": "String s4 = (String) '\\ufeed';", "ans": "A", "explanation": "Option A sets the String reference to null.\nOption B is wrong because null cannot be in single quotes.\nOption C is wrong because there are multiple characters between the single quotes ('abc').\nOption D is wrong because you can't cast a char (primitive) to a String (object)."}, {"question": "What is the numerical range of a char?", "opta": "-128 to 127", "optb": "-(215) to (215) - 1", "optc": "0 to 32767", "optd": "0 to 65535", "ans": "D", "explanation": "A char is really a 16-bit integer behind the scenes, so it supports 216 (from 0 to 65535) values."}]]}
{"test_questions": [[{"question": "What will be the output of the program?\npublic class Foo \n{  \n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.out.println( \"Finally\" ); \n        } \n    } \n}", "opta": "Finally", "optb": "Compilation fails.", "optc": "The code runs with no output.", "optd": "An exception is thrown at runtime.", "ans": "A", "explanation": "If you put a finally block after a try and its associated catch blocks, then once execution enters the try block, the code in that finally block will definitely be executed except in the following circumstances:\n\nAn exception arising in the finally block itself.\nThe death of the thread.\nThe use of System.exit()\nTurning off the power to the CPU.\n\nI suppose the last three could be classified as VM shutdown."}, {"question": "What will be the output of the program?\ntry \n{ \n    int x = 0; \n    int y = 5 / x; \n} \ncatch (Exception e) \n{\n    System.out.println(\"Exception\"); \n} \ncatch (ArithmeticException ae) \n{\n    System.out.println(\" Arithmetic Exception\"); \n} \nSystem.out.println(\"finished\");", "opta": "finished", "optb": "Exception", "optc": "Compilation fails.", "optd": "Arithmetic Exception", "ans": "C", "explanation": "Compilation fails because ArithmeticException has already been caught. ArithmeticException is a subclass of java.lang.Exception, by time the ArithmeticException has been specified it has already been caught by the Exception class.\nIf ArithmeticException appears before Exception, then the file will compile. When catching exceptions the more specific exceptions must be listed before the more general (the subclasses must be caught before the superclasses)."}, {"question": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\");  \n        } \n        finally \n        {\n            System.out.print(\"C\"); \n        } \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() \n    {\n        throw new Error(); /* Line 22 */\n    } \n}", "opta": "ABCD", "optb": "Compilation fails.", "optc": "C is printed before exiting with an error message.", "optd": "BC is printed before exiting with an error message.", "ans": "C", "explanation": "Error is thrown but not recognised line(22) because the only catch attempts to catch an Exception and Exception is not a superclass of Error. Therefore only the code in the finally statement can be run before exiting with a runtime error (Exception in thread \"main\" java.lang.Error)."}, {"question": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\");  \n        } \n        catch (RuntimeException ex) /* Line 10 */\n        { \n            System.out.print(\"B\"); \n        } \n        catch (Exception ex1) \n        { \n            System.out.print(\"C\"); \n        } \n        finally \n        {\n            System.out.print(\"D\"); \n        } \n        System.out.print(\"E\"); \n    } \n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}", "opta": "BD", "optb": "BCD", "optc": "BDE", "optd": "BCDE", "ans": "C", "explanation": "A Run time exception is thrown and caught in the catch statement on line 10. All the code after the finally statement is run because the exception has been caught."}, {"question": "What will be the output of the program?\npublic class RTExcept \n{\n    public static void throwit () \n    {\n        System.out.print(\"throwit \");\n        throw new RuntimeException();\n    }\n    public static void main(String [] args) \n    {\n        try \n        {\n            System.out.print(\"hello \");\n            throwit();\n        }\n        catch (Exception re ) \n        {\n            System.out.print(\"caught \");\n        }\n        finally \n        {\n            System.out.print(\"finally \");\n        }\n        System.out.println(\"after \");\n    }\n}", "opta": "hello throwit caught", "optb": "Compilation fails", "optc": "hello throwit RuntimeException caught after", "optd": "hello throwit caught finally after", "ans": "D", "explanation": "The main() method properly catches and handles the RuntimeException in the catch block, finally runs (as it always does), and then the code returns to normal.\nA, B and C are incorrect based on the program logic described above. Remember that properly handled exceptions do not cause the program to stop executing."}, {"question": "What will be the output of the program?\npublic class Test \n{  \n    public static void aMethod() throws Exception \n    {\n        try /* Line 5 */\n        {\n            throw new Exception(); /* Line 7 */\n        } \n        finally /* Line 9 */\n        {\n            System.out.print(\"finally \"); /* Line 11 */\n        } \n    } \n    public static void main(String args[]) \n    {\n        try \n        {\n            aMethod();  \n        } \n        catch (Exception e) /* Line 20 */\n        {\n            System.out.print(\"exception \"); \n        } \n        System.out.print(\"finished\"); /* Line 24 */\n    } \n}", "opta": "finally", "optb": "exception finished", "optc": "finally exception finished", "optd": "Compilation fails", "ans": "C", "explanation": "This is what happens: \n(1) The execution of the try block (line 5) completes abruptly because of the throw statement (line 7).\n(2) The exception cannot be assigned to the parameter of any catch clause of the try statement therefore the finally block is executed (line 9) and \"finally\" is output (line 11).\n(3) The finally block completes normally, and then the try statement completes abruptly because of the throw statement (line 7).\n(4) The exception is propagated up the call stack and is caught by the catch in the main method (line 20). This prints \"exception\".\n(5) Lastly program execution continues, because the exception has been caught, and \"finished\" is output (line 24)."}, {"question": "What will be the output of the program?\npublic class X \n{ \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\"); \n        }  \n        finally \n        {\n            System.out.print(\"C\"); \n        }  \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() {} \n}", "opta": "AC", "optb": "BC", "optc": "ACD", "optd": "ABCD", "ans": "C", "explanation": "There is no exception thrown, so all the code with the exception of the catch statement block is run."}, {"question": "What will be the output of the program?\npublic class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod(); /* Line 7 */\n            System.out.print(\"A\"); \n        } \n        catch (Exception ex) /* Line 10 */\n        {\n            System.out.print(\"B\"); /* Line 12 */\n        } \n        finally /* Line 14 */\n        {\n            System.out.print(\"C\"); /* Line 16 */\n        }  \n        System.out.print(\"D\"); /* Line 18 */\n    } \n    public static void badMethod() \n    {\n        throw new RuntimeException(); \n    } \n}", "opta": "AB", "optb": "BC", "optc": "ABC", "optd": "BCD", "ans": "D", "explanation": "(1) A RuntimeException is thrown, this is a subclass of exception.\n(2) The exception causes the try to complete abruptly (line 7) therefore line 8 is never executed.\n(3) The exception is caught (line 10) and \"B\" is output (line 12)\n(4) The finally block (line 14) is always executed and \"C\" is output (line 16).\n(5) The exception was caught, so the program continues with line 18 and outputs \"D\"."}, {"question": "What will be the output of the program?\npublic class MyProgram \n{\n    public static void main(String args[])\n    {\n        try \n        {\n            System.out.print(\"Hello world \");\n        }\n        finally \n        {\n            System.out.println(\"Finally executing \");\n        }\n    }\n}", "opta": "Nothing. The program will not compile because no exceptions are specified.", "optb": "Nothing. The program will not compile because no catch clauses are specified.", "optc": "Hello world.", "optd": "Hello world Finally executing", "ans": "D", "explanation": "Finally clauses are always executed. The program will first execute the try block, printing Hello world, and will then execute the finally block, printing Finally executing.\nOption A, B, and C are incorrect based on the program logic described above. Remember that either a catch or a finally statement must follow a try. Since the finally is present, the catch is not required."}, {"question": "What will be the output of the program?\nclass Exc0 extends Exception { } \nclass Exc1 extends Exc0 { } /* Line 2 */\npublic class Test \n{  \n    public static void main(String args[]) \n    { \n        try \n        {  \n            throw new Exc1(); /* Line 9 */\n        } \n        catch (Exc0 e0) /* Line 11 */\n        {\n            System.out.println(\"Ex0 caught\"); \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"exception caught\");  \n        } \n    } \n}", "opta": "Ex0 caught", "optb": "exception caught", "optc": "Compilation fails because of an error at line 2.", "optd": "Compilation fails because of an error at line 9.", "ans": "A", "explanation": "An exception Exc1 is thrown and is caught by the catch statement on line 11. The code is executed in this block. There is no finally block of code to execute."}]]}
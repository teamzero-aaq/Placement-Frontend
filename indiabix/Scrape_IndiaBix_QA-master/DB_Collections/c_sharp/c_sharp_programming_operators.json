{"test_questions": [[{"question": "Which of the following are the correct ways to increment the value of variable a by 1?\n++a++;\na += 1;\na ++ 1;\na = a +1;\na = +1;", "opta": "1, 3", "optb": "2, 4", "optc": "3, 5", "optd": "4, 5", "opte": "None of these", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the C#.NET code snippet given below?\nbyte b1 = 0xF7;\nbyte b2 = 0xAB;\nbyte temp;\ntemp = (byte)(b1 & b2);\nConsole.Write (temp + \" \");\ntemp = (byte)(b1^b2);\nConsole.WriteLine(temp);", "opta": "163 92", "optb": "92 163", "optc": "192 63", "optd": "0 1", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is NOT an Arithmetic operator in C#.NET?", "opta": "**", "optb": "+", "optc": "/", "optd": "%", "opte": "*", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following are NOT Relational operators in C#.NET?\n>=\n!=\nNot\n<=\n<>=", "opta": "1, 3", "optb": "2, 4", "optc": "3, 5", "optd": "4, 5", "opte": "None of these", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is NOT a Bitwise operator in C#.NET?", "opta": "&", "optb": "|", "optc": "<<", "optd": "^", "opte": "~", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the C#.NET code snippet given below?\nint d; \nd = Convert.ToInt32( !(30 < 20) );", "opta": "A value 0 will be assigned to d.", "optb": "A value 1 will be assigned to d.", "optc": "A value -1 will be assigned to d.", "optd": "The code reports an error.", "opte": "The code snippet will work correctly if ! is replaced by Not.", "ans": "B", "explanation": "Sample Program:\nbool falseFlag = false;\nbool trueFlag = true;\n\nConsole.WriteLine(\"{0} converts to {1}.\", falseFlag,\n                  Convert.ToInt32(falseFlag));\nConsole.WriteLine(\"{0} converts to {1}.\", trueFlag,\n                  Convert.ToInt32(trueFlag));\nThe example displays the following output:\n\n       False converts to 0.\n       True converts to 1."}, {"question": "Which of the following is the correct output for the C#.NET code snippet given below?\nConsole.WriteLine(13 / 2 + \" \" + 13 % 2);", "opta": "6.5 1", "optb": "6.5 0", "optc": "6 0", "optd": "6 1", "opte": "6.5 6.5", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about the Bitwise & operator used in C#.NET?\nThe & operator can be used to Invert a bit.\nThe & operator can be used to put ON a bit.\nThe & operator can be used to put OFF a bit.\nThe & operator can be used to check whether a bit is ON.\nThe & operator can be used to check whether a bit is OFF.", "opta": "1, 2, 4", "optb": "2, 3, 5", "optc": "3, 4", "optd": "3, 4, 5", "opte": "None of these", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following are Logical operators in C#.NET?\n&&\n||\n!\nXor\n%", "opta": "1, 2, 3", "optb": "1, 3, 4", "optc": "2, 4, 5", "optd": "3, 4, 5", "opte": "None of these", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Suppose n is a variable of the type Byte and we wish, to check whether its fourth bit (from right) is ON or OFF. Which of the following statements will do this correctly?", "opta": "if ((n&16) == 16)\nConsole.WriteLine(\"Fourth bit is ON\");", "optb": "if ((n&8) == 8)\nConsole.WriteLine(\"Fourth bit is ON\");", "optc": "if ((n ! 8) == 8)\nConsole.WriteLine(\"Fourth bit is ON\");", "optd": "if ((n ^ 8) == 8)\nConsole.WriteLine(\"Fourth bit is ON\");", "opte": "if ((n ~ 8) == 8)\nConsole. WriteLine(\"Fourth bit is ON\");", "ans": "B", "explanation": "byte myByte = 153; // In Binary = 10011001\n\nbyte n = 8; // In Binary = 00001000 \n(Here 1 is the 4th bit from right)\n\nNow perform logical AND operation (n & myByte)\n\n 10011001\n 00001000\n---------\n 00001000  Here result is other than 0, so evaluated to True.\n---------\nIf the result is true, then we can understand that 4th bit is ON of the given data myByte."}, {"question": "What will be the output of the C#.NET code snippet given below? \nint num = 1, z = 5;\n\nif (!(num <= 0))\n    Console.WriteLine( ++num + z++ + \" \" + ++z ); \nelse\n    Console.WriteLine( --num + z-- + \" \" + --z );", "opta": "5 6", "optb": "6 5", "optc": "6 6", "optd": "7 7", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Suppose n is a variable of the type Byte and we wish to put OFF its fourth bit (from right) without disturbing any other bits. Which of the following statements will do this correctly?", "opta": "n = n && HF7", "optb": "n = n & 16", "optc": "n = n & 0xF7", "optd": "n = n & HexF7", "opte": "n = n & 8", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the C#.NET code snippet given below?\nbyte b1 = 0xAB;\nbyte b2 = 0x99;\nbyte temp;\ntemp = (byte)~b2;\nConsole.Write(temp + \" \");\ntemp = (byte)(b1 << b2);\nConsole.Write (temp + \" \");\ntemp = (byte) (b2 >> 2);\nConsole.WriteLine(temp);", "opta": "102 1 38", "optb": "108 0 32", "optc": "102 0 38", "optd": "1 0 1", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about Bitwise | operator used in C#.NET?", "opta": "The | operator can be used to put OFF a bit.", "optb": "The | operator can be used to Invert a bit.", "optc": "The | operator can be used to check whether a bit is ON.", "optd": "The | operator can be used to check whether a bit is OFF.", "opte": "The | operator can be used to put ON a bit.", "ans": "E", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which  of the  following  is  NOT an Assignment operator in C#.NET?", "opta": "\\=", "optb": "/=", "optc": "*=", "optd": "+=", "opte": "%=", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the C#.NET code snippet given below?\nint i, j = 1, k;\nfor (i = 0; i < 5; i++)\n{\n    k = j++ + ++j;\n    Console.Write(k + \" \");\n}", "opta": "8 4 16 12 20", "optb": "4 8 12 16 20", "optc": "4 8 16 32 64", "optd": "2 4 6 8 10", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the C#.NET code snippet given below?\nint a = 10, b = 20, c = 30; \nint res = a < b ? a < c ? c : a : b; \nConsole.WriteLine(res);", "opta": "10", "optb": "20", "optc": "30", "optd": "Compile Error / Syntax Error", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about the following code snippet?\nint a = 10; \nint b = 20;\nbool c;\nc = !(a > b);\nThere is no error in the code snippet.\nAn error will be reported since ! can work only with an int.\nA value 1 will be assigned to c.\nA value True will be assigned to c.\nA value False will be assigned to c.", "opta": "1, 3", "optb": "2, 4", "optc": "4, 5", "optd": "1, 4", "opte": "None of these", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about Bitwise ^ operator used in C#.NET?", "opta": "The ^ operator can be used to put ON a bit.", "optb": "The ^ operator can be used to put OFF a bit.", "optc": "The ^ operator can be used to Invert a bit.", "optd": "The ^ operator can be used to check whether a bit is ON.", "opte": "The ^ operator can be used to check whether a bit is OFF.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct?\nThe conditional operator (?:) returns one of two values depending on the value of a Boolean expression.\nThe as operator in C#.NET is used to perform conversions between compatible reference types.\nThe &* operator is also used to declare pointer types and to dereference pointers.\nThe -> operator combines pointer dereferencing and member access.\nIn addition to being used to specify the order of operations in an expression, brackets [ ] are used to specify casts or type conversions.", "opta": "1, 2, 4", "optb": "2, 3, 5", "optc": "3, 4, 5", "optd": "1, 3, 5", "opte": "None of these", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}]]}
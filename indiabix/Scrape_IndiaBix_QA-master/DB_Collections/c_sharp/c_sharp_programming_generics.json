{"test_questions": [[{"question": "Which one of the following classes are present System.Collections.Generic namespace?\nStack\nTree\nSortedDictionary\nSortedArray", "opta": "1 and 2 only", "optb": "2 and 4 only", "optc": "1 and 3 only", "optd": "All of the above", "opte": "None of the above", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For the code snippet shown below, which of the following statements are valid?\npublic class Generic<T>\n{\n    public T Field; \n    public void TestSub()\n    {\n        T i = Field + 1;\n    }\n}\nclass MyProgram\n{\n    static void Main(string[] args)\n    {\n        Generic<int> gen = new Generic<int>();\n        gen.TestSub();\n    }\n}", "opta": "Addition will produce result 1.", "optb": "Result of addition is system-dependent.", "optc": "Program will generate run-time exception.", "optd": "Compiler will report an error: Operator '+' is not defined for types T and int.", "opte": "None of the above.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are valid about generics in .NET Framework?\nGenerics is a language feature.\nWe can create a generic class, however, we cannot create a generic interface in C#.NET.\nGenerics delegates are not allowed in C#.NET.\nGenerics are useful in collection classes in .NET framework.\nNone of the above", "opta": "1 and 2 Only", "optb": "1, 2 and 3 Only", "optc": "1 and 4 Only", "optd": "All of the above", "opte": "None of the above", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which  of the  following  statements  is  valid  about  generic procedures in C#.NET?", "opta": "All procedures in a Generic class are generic.", "optb": "Only those procedures labeled as Generic are generic.", "optc": "Generic procedures can take at the most one generic parameter.", "optd": "Generic procedures must take at least one type parameter.", "opte": "None of the above.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For the code  snippet shown below, which of the  following statements are valid?\npublic class TestIndiaBix\n{\n    public void TestSub<M> (M arg)\n    {\n        Console.Write(arg);\n    }\n}\nclass MyProgram\n{\n    static void Main(string[] args)\n    {\n        TestIndiaBix bix = new TestIndiaBix();\n        bix.TestSub(\"IndiaBIX \");\n        bix.TestSub(4.2f);\n    }\n}", "opta": "Program will compile and on execution will print: IndiaBIX 4.2", "optb": "A non generic class Hello cannot have generic subroutine.", "optc": "Compiler will generate an error.", "optd": "Program will generate a run-time exception.", "opte": "None of the above.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For the code snippet given below, which of the following statements is valid?\npublic class Generic<T>\n{\n    public T Field;\n}\nclass Program\n{\n    static void Main(string[ ] args)\n    {\n        Generic<String> g = new Generic<String>();\n        g.Field = \"Hello\";\n        Console.WriteLine(g.Field);\n    }\n}", "opta": "It will print string \"Hello\" on the console.", "optb": "Name Generic cannot be used as a class name because it's a keyword.", "optc": "Compiler will give an error.", "optd": "Member Field of class Generic is not accessible directly.", "opte": "None of the above.", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For the code  snippet given below, which of the following statements are valid?\npublic class MyContainer<T> where T: IComparabte\n{\n    // Insert code here\n}\nClass  MyContainer  requires  that  it's  type  argument  must implement IComparabte interface.\nType argument of class MyContainer must be IComparabte.\nCompiler will report an error for this block of code.\nThis requirement on type argument is called as constraint.", "opta": "1 and 2 Only", "optb": "1, 2 and 3 Only", "optc": "1 and 4 Only", "optd": "All of the above", "opte": "None of the above", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "For the code  snippet given below, which of the following statements are valid?\npublic class MyContainer<T> where T: class, IComparable\n{\n    //Insert code here\n}\nClass  MyContainer  requires  that  it's  type  argument must implement IComparable interface.\nCompiler will report an error for this block of code.\nThere are multiple constraints on type argument to MyContainer class.\nClass MyContainer requires that its type argument must be a reference type and it must implement IComparable interface.", "opta": "1 and 2 Only", "optb": "3 and 4 Only", "optc": "2 and 3 Only", "optd": "All of the above", "opte": "None of the above", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is valid about advantages of generics?", "opta": "Generics shift the burden of type safety to the programmer rather than compiler.", "optb": "Generics require use of explicit type casting.", "optc": "Generics provide type safety without the overhead of multiple implementations.", "optd": "Generics eliminate the possibility of run-time errors.", "opte": "None of the above.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}]]}
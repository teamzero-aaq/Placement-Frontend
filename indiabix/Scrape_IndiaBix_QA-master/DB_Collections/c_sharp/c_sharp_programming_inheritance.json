{"test_questions": [[{"question": "Which of the following can be facilitated by the Inheritance mechanism?\nUse the existing functionality of base class.\nOverrride the existing functionality of base class.\nImplement new functionality in the derived class.\nImplement polymorphic behaviour.\nImplement containership.", "opta": "1, 2, 3", "optb": "3, 4", "optc": "2, 4, 5", "optd": "3, 5", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements should be added to the subroutine fun( ) if the C#.NET code snippet given below is to output 9 13?\nclass BaseClass\n{\n    protected int i = 13;\n}\nclass Derived: BaseClass\n{\n    int i = 9; \n    public void fun()\n    {\n        // [*** Add statement here ***]\n    } \n}", "opta": "Console.WriteLine(base.i + \" \" + i);", "optb": "Console.WriteLine(i + \" \" + base.i);", "optc": "Console.WriteLine(mybase.i + \" \" + i);", "optd": "Console.WriteLine(i + \" \" + mybase.i);", "opte": "Console.WriteLine(i + \" \" + this.i);", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class index\n    {\n        protected int count;\n        public index()\n        {\n            count = 0;\n        }\n    }\n    class index1: index\n    {\n        public void increment()\n        {\n            count = count +1;\n        }\n    }\n    class MyProgram\n    {\n        static void Main(string[] args)\n        {\n            index1 i = new index1(); \n            i.increment(); \n        }\n    }\n}\ncount should be declared as public if it is to become available in the inheritance chain.\ncount should be declared as protected if it is to become available in the inheritance chain.\nWhile constructing an object referred to by i firstly constructor of index class will be called followed by constructor of index1 class.\nConstructor of index class does not get inherited in index1 class.\ncount should be declared as Friend if it is to become available in the inheritance chain.", "opta": "1, 2, 5", "optb": "2, 3, 4", "optc": "3, 5", "optd": "4, 5", "opte": "None of these", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the size of the object created by the following C#.NET code snippet?\nnamespace IndiabixConsoleApplication\n{ \n    class Baseclass\n    {\n        private int i; \n        protected int j; \n        public int k;\n    }\n    class Derived: Baseclass\n    {\n        private int x; \n        protected int y; \n        public int z;\n    }\n    class MyProgram\n    { \n        static void Main (string[ ] args)\n        { \n            Derived d = new Derived();\n        } \n    } \n}", "opta": "24 bytes", "optb": "12 bytes", "optc": "20 bytes", "optd": "10 bytes", "opte": "16 bytes", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which statement will you add in the function fun() of class B, if it is to produce the output \"Welcome to IndiaBIX.com!\"?\nnamespace IndiabixConsoleApplication\n{ \n    class A\n    {\n        public void fun()\n        {\n            Console.Write(\"Welcome\");\n        } \n    } \n    class B: A\n    {\n        public void fun()\n        {\n            // [*** Add statement here ***]\n            Console.WriteLine(\" to IndiaBIX.com!\");\n        } \n    } \n    class MyProgram\n    { \n        static void Main (string[ ] args)\n        { \n            B b = new B(); \n            b.fun();\n        } \n    } \n}", "opta": "base.fun();", "optb": "A::fun();", "optc": "fun();", "optd": "mybase.fun();", "opte": "A.fun();", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class Baseclass\n    { \n        public void fun()\n        { \n            Console.Write(\"Base class\" + \" \");\n        } \n    } \n    class Derived1: Baseclass\n    { \n        new void fun()\n        {\n            Console.Write(\"Derived1 class\" + \" \"); \n        } \n    } \n    class Derived2: Derived1\n    { \n        new void fun()\n        { \n            Console.Write(\"Derived2 class\" + \" \");\n        }\n    }\n    class Program\n    { \n        public static void Main(string[ ] args)\n        { \n            Derived2 d = new Derived2(); \n            d.fun(); \n        } \n    } \n}", "opta": "Base class", "optb": "Derived1 class", "optc": "Derived2 class", "optd": "Base class Derived1 class", "opte": "Base class Derived1 class Derived2 class", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following should be used to implement a 'Has a' relationship between two entities?", "opta": "Polymorphism", "optb": "Templates", "optc": "Containership", "optd": "Encapsulation", "opte": "Inheritance", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is correct about the C#.NET snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class Baseclass\n    { \n        public void fun()\n        { \n            Console.WriteLine(\"Hi\" + \" \");\n        } \n        public void fun(int i)\n        {\n            Console.Write(\"Hello\" + \" \");\n        } \n    } \n    class Derived: Baseclass\n    {\n        public void fun()\n        {\n            Console.Write(\"Bye\" + \" \");\n        } \n    } \n    class MyProgram\n    { \n        static void Main(string[ ] args)\n        { \n            Derived d; \n            d = new Derived(); \n            d.fun(); \n            d.fun(77);\n        } \n    } \n}", "opta": "The program gives the output as: Hi Hello Bye", "optb": "The program gives the output as: Bye Hello", "optc": "The program gives the output as: Hi Bye Hello", "optd": "Error in the program", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In an inheritance chain which of the following members of base class are accessible to the derived class members?\nstatic\nprotected\nprivate\nshared\npublic", "opta": "1, 3", "optb": "2, 5", "optc": "3, 4", "optd": "4, 5", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which  of the  following are reuse  mechanisms available  in C#.NET?\nInheritance\nEncapsulation\nTemplates\nContainership\nPolymorphism", "opta": "1, 4", "optb": "1, 3", "optc": "2, 4", "optd": "3, 5", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following should be used to implement a 'Like a' or a 'Kind of' relationship between two entities?", "opta": "Polymorphism", "optb": "Containership", "optc": "Templates", "optd": "Encapsulation", "opte": "Inheritance", "ans": "E", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How can you prevent inheritance from a class in C#.NET ?", "opta": "Declare the class as shadows.", "optb": "Declare the class as overloads.", "optc": "Declare the class as sealed.", "optd": "Declare the class as suppress.", "opte": "Declare the class as override.", "ans": "C", "explanation": "C#.NET allows sealed attribute to be used as a part of class statement. Classes declared with sealed keyword cannot be used as based class for other classes.  Most important reason to do this world be to prevent behavior of a class to be changed in any way."}, {"question": "Which of the following statements are correct about Inheritance in C#.NET?\nA derived class object contains all the base class data.\nInheritance cannot suppress the base class functionality.\nA derived class may not be able to access all the base class data.\nInheritance cannot extend the base class functionality.\nIn inheritance chain construction of object happens from base towards derived.", "opta": "1, 2, 4", "optb": "2, 4, 5", "optc": "1, 3, 5", "optd": "2, 4", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Assume class B is inherited from class A. Which of the following statements is correct about construction of an object of class B?", "opta": "While creating the object firstly the constructor of class B will be called followed by constructor of class A.", "optb": "While creating the object firstly the constructor of class A will be called followed by constructor of class B.", "optc": "The constructor of only class B will be called.", "optd": "The constructor of only class A will be called.", "opte": "The order of calling constructors depends upon whether constructors in class A and class B are private or public.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the C#.NET program given below?\nnamespace IndiabixConsoleApplication\n{\n    class Baseclass\n    { \n        int i;\n        public Baseclass(int ii)\n        {\n            i = ii;\n            Console.Write(\"Base \"); \n        } \n    } \n    class Derived : Baseclass\n    {\n        public Derived(int ii) : base(ii)\n        {\n            Console.Write(\"Derived \");\n        } \n    } \n    class MyProgram\n    { \n        static void Main(string[ ] args)\n        { \n            Derived d = new Derived(10);\n        } \n    } \n}", "opta": "The program will work correctly only if we implement zero-argument constructors in Baseclass as well as Derived class.", "optb": "The program will output: Derived Base", "optc": "The program will report an error in the statement base(ii).", "optd": "The program will work correctly if we replace base(ii) with base.Baseclass(ii).", "opte": "The program will output: Base Derived", "ans": "E", "explanation": "No answer description available for this question. Let us discuss."}]]}
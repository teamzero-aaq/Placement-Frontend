{"test_questions": [[{"question": "Which of the following statements are correct about the C#.NET code snippet given below?\nint[ , ] intMyArr = {{7, 1, 3}, {2, 9, 6}};\nintMyArr represents rectangular array of 2 rows and 3 columns.\nintMyArr.GetUpperBound(1) will yield 2.\nintMyArr.Length will yield 24.\nintMyArr represents 1-D array of 5 integers.\nintMyArr.GetUpperBound(0) will yield 2.", "opta": "1, 2", "optb": "2, 3", "optc": "2, 5", "optd": "1, 4", "opte": "3, 4", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about the C#.NET code snippet given below?\n    int[] a = {11, 3, 5, 9, 4}; \nThe array elements are created on the stack.\nRefernce a is created on the stack.\nThe array elements are created on the heap.\nOn declaring the array a new array class is created which is derived from System.Array Class.\nWhether the array elements are stored in the stack or heap depends upon the size of the array.", "opta": "1, 2", "optb": "2, 3, 4", "optc": "2, 3, 5", "optd": "4, 5", "opte": "None of these", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which one of the following statements is correct?", "opta": "Array elements can be of integer type only.", "optb": "The rank of an Array is the total number of elements it can contain.", "optc": "The length of an Array is the number of dimensions in the Array.", "optd": "The default value of numeric array elements is zero.", "opte": "The Array elements are guaranteed to be sorted.", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "If a is an array of 5 integers then which of the following is the correct way to increase its size to 10 elements?", "opta": "int[] a = new int[5]; \nint[] a = new int[10];", "optb": "int[] a = int[5]; \nint[] a = int[10];", "optc": "int[] a = new int[5]; \na.Length = 10 ;", "optd": "int[] a = new int[5]; \na = new int[10];", "opte": "int[] a = new int[5]; \na.GetUpperBound(10);", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "How will you complete the foreach loop in the C#.NET code snippet given below such that it correctly prints all elements of the array a?\n    int[][]a = new int[2][];\n    a[0] = new int[4]{6, 1 ,4, 3};\n    a[1] = new int[3]{9, 2, 7}; \n    foreach (int[ ] i in a)\n    {\n        /* Add loop here */\n        Console.Write(j + \" \");\n        Console.WriteLine(); \n    }", "opta": "foreach (int j = 1; j < a(0).GetUpperBound; j++)", "optb": "foreach (int j = 1; j < a.GetUpperBound (0); j++)", "optc": "foreach (int j in a.Length)", "optd": "foreach (int j in i)", "opte": "foreach (int j in a.Length -1)", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct output of the C#.NET code snippet given below?\n    int[ , , ] a = new int[ 3, 2, 3 ]; \n    Console.WriteLine(a.Length);", "opta": "20", "optb": "4", "optc": "18", "optd": "10", "opte": "5", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about arrays used in C#.NET?\nArrays can be rectangular or jagged.\nRectangular arrays  have  similar rows  stored  in  adjacent memory locations.\nJagged arrays do not have an access to the methods of System.Array Class.\nRectangular arrays do not have an access to the methods of System.Array Class.\nJagged arrays have dissimilar rows stored in non-adjacent memory locations.", "opta": "1, 2", "optb": "1, 3, 5", "optc": "3, 4", "optd": "1, 2, 5", "opte": "4, 5", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements are correct about the C#.NET code snippet given below?\n   int[][]intMyArr = new int[2][]; \n   intMyArr[0] = new int[4]{6, 1, 4, 3}; \n   intMyArr[1] = new int[3]{9, 2, 7};", "opta": "intMyArr is a reference to a 2-D jagged array.", "optb": "The two rows of the jagged array intMyArr are stored in adjacent memory locations.", "optc": "intMyArr[0] refers to the zeroth 1-D array and intMyArr[1] refers to the first 1-D array.", "optd": "intMyArr refers to intMyArr[0] and intMyArr[1].", "opte": "intMyArr refers to intMyArr[1] and intMyArr[2].", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following are the correct ways to define an array of 2 rows and 3 columns?\n\nint[ , ] a;\na = new int[2, 3]{{7, 1, 3},{2, 9, 6}};\n\nint[ , ] a;\na = new int[2, 3]{};\n\nint[ , ] a = {{7, 1, 3}, {2, 9,6 }};\n\nint[ , ] a;\na = new int[1, 2];\n\nint[ , ] a;\na = new int[1, 2]{{7, 1, 3}, {2, 9, 6}};", "opta": "1, 2 , 3", "optb": "1, 3", "optc": "2, 3", "optd": "2, 4, 5", "opte": "4, 5", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the array declaration given below?\n   int[][][] intMyArr = new int[2][][];", "opta": "intMyArr refers to a 2-D jagged array containing 2 rows.", "optb": "intMyArr refers to a 2-D jagged array containing 3 rows.", "optc": "intMyArr refers to a 3-D jagged array containing 2 2-D jagged arrays.", "optd": "intMyArr refers to a 3-D jagged array containing three 2-D jagged arrays.", "opte": "intMyArr refers to a 3-D jagged array containing 2 2-D rectangular arrays.", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following statements is correct about the C#.NET code snippet given below?\n    int[] intMyArr = {11, 3, 5, 9, 4};", "opta": "intMyArr is a reference to an object of System.Array Class.", "optb": "intMyArr is a reference to an object of a class that the compiler derives from System.Array Class.", "optc": "intMyArr is a reference to an array of integers.", "optd": "intMyArr is a reference to an object created on the stack.", "opte": "intMyArr is a reference to the array created on the stack.", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct way to define and initialise an array of 4 integers?\n\nint[] a = {25, 30, 40, 5};\n\nint[] a;\na = new int[3];\na[0] = 25;\na[1] = 30;\na[2] = 40;\na[3] = 5;\n\nint[] a;\na = new int{25, 30, 40, 5};\n\nint[] a;\na = new int[4]{25, 30, 40, 5};\n\nint[] a;\na = new int[4];\na[0] = 25;\na[1] = 30;\na[2] = 40;\na[3] = 5;", "opta": "1, 2", "optb": "3, 4", "optc": "1, 4, 5", "optd": "2, 4, 5", "opte": "2, 5", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct output of the C#.NET code snippet given below?\n    int[][] a = new int[2][];\n    a[0] = new int[4]{6, 1, 4, 3};\n    a[1] = new int[3]{9, 2, 7}; \n    Console.WriteLine(a[1].GetUpperBound(0));", "opta": "3", "optb": "4", "optc": "7", "optd": "9", "opte": "2", "ans": "E", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following is the correct way to obtain the number of elements present in the array given below?\n    int[] intMyArr = {25, 30, 45, 15, 60};\nintMyArr.GetMax;\nintMyArr.Highest(0);\nintMyArr.GetUpperBound(0);\nintMyArr.Length;\nintMyArr.GetMaxElements(0);", "opta": "1, 2", "optb": "3, 4", "optc": "3, 5", "optd": "1, 5", "opte": "4, 5", "ans": "B", "explanation": "using System;\n    \npublic class Test\n{ \n   public static void Main()\n   { \n        int[] intMyArr = { 25, 30, 45, 15, 60, 78, 99 };\n        Console.WriteLine(intMyArr.Length);\n        Console.WriteLine(intMyArr.GetUpperBound(0)+1);\n   } \n}\n/* \nOutput : \n7 \n7 \n*/"}, {"question": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class SampleProgram\n    {\n        static void Main(string[ ] args)\n        {\n            int i, j;\n            int[ , ] arr = new int[ 2, 2 ];\n            for(i = 0; i < 2; ++i)\n            {\n                for(j = 0; j < 2; ++j)\n                {\n                    arr[i, j] = i * 17 + i * 17;\n                    Console.Write(arr[ i, j ] + \" \");\n                }\n            }\n        }\n    }\n}", "opta": "0 0 34 34", "optb": "0 0 17 17", "optc": "0 0 0 0", "optd": "17 17 0 0", "opte": "34 34 0 0", "ans": "A", "explanation": "No answer description available for this question. Let us discuss."}]]}
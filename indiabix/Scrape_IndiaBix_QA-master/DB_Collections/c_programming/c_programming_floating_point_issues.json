{"test_questions": [[{"question": "What are the different types of real data type in C ?", "opta": "float, double", "optb": "short int, double, long int", "optc": "float, double, long double", "optd": "double, long int, float", "ans": "C", "explanation": "The floating point data types are called real data types. Hence float, double, and long double are real data types."}, {"question": "What will you do to treat the constant 3.14 as a long double?", "opta": "use 3.14LD", "optb": "use 3.14L", "optc": "use 3.14DL", "optd": "use 3.14LF", "ans": "B", "explanation": "Given 3.14 is a double constant.\nTo specify 3.14 as long double, we have to add L to the 3.14. (i.e 3.14L)"}, {"question": "If the binary eauivalent of 5.375 in normalised form is 0100 0000 1010 1100 0000 0000 0000 0000, what will be the output of the program (on intel machine)? \n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float a=5.375;\n    char *p;\n    int i;\n    p = (char*)&a;\n    for(i=0; i<=3; i++)\n        printf(\"%02x\\n\", (unsigned char)p[i]);\n    return 0;\n}", "opta": "40 AC 00 00", "optb": "04 CA 00 00", "optc": "00 00 AC 40", "optd": "00 00 CA 04", "ans": "C", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "Which of the following range is a valid long double (Turbo C in 16 bit DOS OS) ?", "opta": "3.4E-4932 to 1.1E+4932", "optb": "3.4E-4932 to 3.4E+4932", "optc": "1.1E-4932 to 1.1E+4932", "optd": "1.7E-4932 to 1.7E+4932", "ans": "A", "explanation": "The range of long double is 3.4E-4932 to 1.1E+4932"}, {"question": "Which statement will you add in the following program to work it correctly?\n#include<stdio.h>\nint main()\n{\n    printf(\"%f\\n\", log(36.0));\n    return 0;\n}", "opta": "#include<conio.h>", "optb": "#include<math.h>", "optc": "#include<stdlib.h>", "optd": "#include<dos.h>", "ans": "B", "explanation": "math.h is a header file in the standard library of C programming language designed for basic mathematical operations.\r\n\n\nDeclaration syntax: double log(double);"}, {"question": "We want to round off x, a float, to an int value, The correct way to do is", "opta": "y = (int)(x + 0.5)", "optb": "y = int(x + 0.5)", "optc": "y = (int)x + 0.5", "optd": "y = (int)((int)x + 0.5)", "ans": "A", "explanation": "Rounding off a value means replacing it by a nearest value that is approximately equal or smaller or greater to the given number.\r\n\n\ny = (int)(x + 0.5); here x is any float value. To roundoff, we have to typecast the value of x by using (int)\n\nExample:\n\r\n#include <stdio.h>\r\n\r\nint main ()\r\n{\r\n  float x = 3.6;\r\n  int y = (int)(x + 0.5);\r\n  printf (\"Result = %d\\n\", y );\r\n  return 0;\r\n}\r\n\n\nOutput:\r\nResult = 4."}, {"question": "The binary equivalent of 5.375 is", "opta": "101.101110111", "optb": "101.011", "optc": "101011", "optd": "None of above", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "A float occupies 4 bytes. If the hexadecimal equivalent of these 4 bytes are A, B, C and D, then when this float is stored in memory in which of the following order do these bytes gets stored?", "opta": "ABCD", "optb": "DCBA", "optc": "0xABCD", "optd": "Depends on big endian or little endian architecture", "ans": "D", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "What will you do to treat the constant 3.14 as a float?", "opta": "use float(3.14f)", "optb": "use 3.14f", "optc": "use f(3.14)", "optd": "use (f)(3.14)", "ans": "B", "explanation": "Given 3.14 is a double constant.\nTo specify 3.14 as float, we have to add f to the 3.14. (i.e 3.14f)"}, {"question": "Which of the following statement obtains the remainder on dividing 5.5 by 1.3 ?", "opta": "rem = (5.5 % 1.3)", "optb": "rem = modf(5.5, 1.3)", "optc": "rem = fmod(5.5, 1.3)", "optd": "Error: we can't divide", "ans": "C", "explanation": "fmod(x,y) - Calculates x modulo y, the remainder of x/y.\n\nThis function is the same as the modulus operator. But fmod() performs floating point divisions.\n\nExample:\n\n#include <stdio.h>\n#include <math.h>\n\nint main ()\n{\n  printf (\"fmod of 5.5 by 1.3 is %lf\\n\", fmod (5.5, 1.3) );\n  return 0;\n}\n\nOutput:\nfmod of 5.5 by 1.3 is 0.300000"}]]}
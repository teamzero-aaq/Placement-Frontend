{"test_questions": [[{"question": "What will happen if in a C program you assign a value to an array element whose subscript exceeds the size of array?", "opta": "The element will be set to 0.", "optb": "The compiler would report an error.", "optc": "The program may crash if some important data gets overwritten.", "optd": "The array size would appropriately grow.", "ans": "C", "explanation": "If the index of the array size is exceeded, the program will crash. Hence \"option c\" is the correct answer. But the modern compilers will take care of this kind of errors.\nExample: Run the below program, it will crash in Windows (TurboC Compiler)\n#include<stdio.h>\n\nint main()\n{\n    int arr[2];\n    arr[3]=10;\n    printf(\"%d\",arr[3]);\n    return 0;\n}\n\nSince C is a compiler dependent language, it may give different outputs at different platforms. We have given the Turbo-C Compiler (Windows) output.\nPlease try the above programs in Windows (Turbo-C Compiler) and Linux (GCC Compiler), you will understand the difference better."}, {"question": "What does the following declaration mean?\nint (*ptr)[10];", "opta": "ptr is array of pointers to 10 integers", "optb": "ptr is a pointer to an array of 10 integers", "optc": "ptr is an array of 10 integers", "optd": "ptr is an pointer to array", "ans": "B", "explanation": "No answer description available for this question. Let us discuss."}, {"question": "In C, if you pass an array as an argument to a function, what actually gets passed?", "opta": "Value of elements in array", "optb": "First element of the array", "optc": "Base address of the array", "optd": "Address of the last element of array", "ans": "C", "explanation": "The statement 'C' is correct. When we pass an array as a funtion argument, the base address of the array will be passed."}]]}
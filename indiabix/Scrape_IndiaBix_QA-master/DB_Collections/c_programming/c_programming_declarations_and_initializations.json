{"test_questions": [[{"question": "Which of the following statements should be used to obtain a remainder after dividing 3.14 by 2.1 ?", "opta": "rem = 3.14 % 2.1;", "optb": "rem = modf(3.14, 2.1);", "optc": "rem = fmod(3.14, 2.1);", "optd": "Remainder cannot be obtain in floating point division.", "ans": "C", "explanation": "fmod(x,y) - Calculates x modulo y, the remainder of x/y.\r\n\r\nThis function is the same as the modulus operator. But fmod() performs floating point divisions.\r\n\nExample:\n\r\n#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main ()\r\n{\r\n  printf (\"fmod of 3.14/2.1 is %lf\\n\", fmod (3.14,2.1) );\r\n  return 0;\r\n}\r\n\nOutput:\r\nfmod of 3.14/2.1 is 1.040000"}, {"question": "What are the types of linkages?", "opta": "Internal and External", "optb": "External, Internal and None", "optc": "External and None", "optd": "Internal", "ans": "B", "explanation": "External Linkage-> means global, non-static variables and functions.\nInternal Linkage-> means static variables and functions with file scope.\nNone Linkage-> means Local variables."}, {"question": "Which of the following special symbol allowed in a variable name?", "opta": "* (asterisk)", "optb": "| (pipeline)", "optc": "- (hyphen)", "optd": "_ (underscore)", "ans": "D", "explanation": "Variable names in C are made up of letters (upper and lower case) and digits. The underscore character (\"_\") is also permitted. Names must not begin with a digit.\nExamples of valid (but not very descriptive) C variable names:\n=> foo \n=> Bar \n=> BAZ \n=> foo_bar \n=> _foo42 \n=> _ \n=> QuUx"}, {"question": "Is there any difference between following declarations?\n\n\n1 :\nextern int fun();\n\n\n2 :\nint fun();", "opta": "Both are identical", "optb": "No difference, except extern int fun(); is probably in another file", "optc": "int fun(); is overrided with extern int fun();", "optd": "None of these", "ans": "B", "explanation": "extern int fun(); declaration in C is to indicate the existence of a global function and it is defined externally to the current module or in another file. \n\nint fun(); declaration in C is to indicate the existence of a function inside the current module or in the same file."}, {"question": "How would you round off a value from 1.66 to 2.0?", "opta": "ceil(1.66)", "optb": "floor(1.66)", "optc": "roundup(1.66)", "optd": "roundto(1.66)", "ans": "A", "explanation": "/* Example for ceil() and floor() functions: */\n\n#include<stdio.h>\n#include<math.h>\n\nint main()\n{\n    printf(\"\\n Result : %f\" , ceil(1.44) );\n    printf(\"\\n Result : %f\" , ceil(1.66) );\n \n    printf(\"\\n Result : %f\" , floor(1.44) );    \n    printf(\"\\n Result : %f\" , floor(1.66) );\n\n    return 0;\n}\n// Output:\n// Result : 2.000000\n// Result : 2.000000\n// Result : 1.000000\n// Result : 1.000000"}, {"question": "By default a real number is treated as a", "opta": "float", "optb": "double", "optc": "long double", "optd": "far double", "ans": "B", "explanation": "In computing, 'real number' often refers to non-complex floating-point numbers. It include both rational numbers, such as 42 and 3/4, and irrational numbers such as pi = 3.14159265...\n\n\nWhen the accuracy of the floating point number is insufficient, we can use the double to define the number. The double is same as float but with longer precision and takes double space (8 bytes) than float.\n\n\nTo extend the precision further we can use long double which occupies 10 bytes of memory space."}, {"question": "Which of the following is not user defined data type?\r\n\n\n1 :\nstruct book\r\n{\r\n    char name[10];\r\n    float price;\r\n    int pages;\r\n};\n\n\n2 :\nlong int l = 2.35;\n\n\n3 :\nenum day {Sun, Mon, Tue, Wed};", "opta": "1", "optb": "2", "optc": "3", "optd": "Both 1 and 2", "ans": "B", "explanation": "C data types classification are\n\n\nPrimary data types\r\n        \nint\nchar\nfloat\ndouble\nvoid\n\n\nSecondary data types (or) User-defined data type\r\n        \nArray\nPointer\nStructure\nUnion\nEnum\n\n\n\n\nSo, clearly long int l = 2.35; is not User-defined data type. (i.e.long int l = 2.35; is the answer.)"}, {"question": "Is the following statement a declaration or definition?\nextern int i;", "opta": "Declaration", "optb": "Definition", "optc": "Function", "optd": "Error", "ans": "A", "explanation": "Declaring is the way a programmer tells the compiler to expect a particular type, be it a variable, class/struct/union type, a function type (prototype) or a particular object instance. (ie. extern int i)\n                \n\nDeclaration never reserves any space for the variable or instance in the program's memory; it simply a \"hint\" to the compiler that a use of the variable or  instance is expected in the program. This hinting is technically called \"forward reference\"."}, {"question": "Identify which of the following are declarations\r\n\n\n1 :\nextern int x;\n\n\n2 :\nfloat square ( float x ) { ... }\n\n\n3 :\ndouble pow(double, double);", "opta": "1", "optb": "2", "optc": "1 and 3", "optd": "3", "ans": "C", "explanation": "extern int x; - is an external variable declaration.\r\ndouble pow(double, double); - is a function prototype declaration.\r\n\r\nTherefore, 1 and 3 are declarations. 2 is definition."}, {"question": "In the following program where is the variable a getting defined and where it is getting declared?\n#include<stdio.h>\nint main()\n{\n    extern int a;\n    printf(\"%d\\n\", a);\n    return 0;\n}\nint a=20;", "opta": "extern int a is declaration, int a = 20 is the definition", "optb": "int a = 20 is declaration, extern int a is the definition", "optc": "int a = 20 is definition, a is not defined", "optd": "a is declared, a is not defined", "ans": "A", "explanation": "- During declaration we tell the datatype of the Variable.\n- During definition the value is initialized."}, {"question": "When we mention the prototype of a function?", "opta": "Defining", "optb": "Declaring", "optc": "Prototyping", "optd": "Calling", "ans": "B", "explanation": "A function prototype in C or C++ is a declaration of a function that omits the function body but does specify the function's name, argument types and return type. While a function definition specifies what a function does, a function prototype can be thought of as specifying its interface."}]]}